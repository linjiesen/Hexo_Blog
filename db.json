{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/alipay.jpg","path":"images/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/love.js","path":"js/src/love.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1614070706866},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1614070706866},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1614070706866},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1614070706869},{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1614070706868},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1614070706869},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1614070706869},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1614070706870},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1614070706870},{"_id":"themes/next/README.cn.md","hash":"b764aae78ffa561a9a68fdee4c6f21c3ce260fbb","modified":1614070706871},{"_id":"themes/next/README.md","hash":"4e276fb9a3c31f1259df3ea9a4b92f4a8d72714d","modified":1614070706872},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1614070706871},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1614070706873},{"_id":"themes/next/_config.yml","hash":"91a5632bcedb905724de064c622cb552c7313f90","modified":1614070706873},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1614070706874},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1614070706928},{"_id":"source/_posts/Anaconda笔记.md","hash":"ba4e506e7d99b33d66e031a884ed1b05f719ccf7","modified":1614070706851},{"_id":"source/_posts/Hexo-Deploy-ssh-Permission-denied.md","hash":"2dec782d70d59987638dc31004c19d3c82240eb3","modified":1614070706852},{"_id":"source/_posts/Hexo博客中插入图片.md","hash":"e43463ef0500ee7bbffd1c9e0caed445ba3c36b0","modified":1614070706852},{"_id":"source/_posts/Python3-Django2-xadmin项目踩坑记录.md","hash":"759093d613d8630c992ffdf8623da965d0253e0b","modified":1614070706855},{"_id":"source/_posts/Python实现BFS-DFS.md","hash":"372b8451d2a539aae2b5aa90c46bc0f17edd497f","modified":1614070706860},{"_id":"source/_posts/hello-world.md","hash":"029f91fccbe8f87c0f3ea10c4042300d2fa7edc0","modified":1614070706862},{"_id":"source/_posts/海子逝世三十周年.md","hash":"cfd8c2b004b77c446b2fcd134642fde093a35a15","modified":1614070706863},{"_id":"source/categories/index.md","hash":"9fa72180e501343f278ba9626a08d483bfe20131","modified":1614070706864},{"_id":"source/_posts/浅谈Docker.md","hash":"7bd2f67df498d894fced7f96583d158a2308dd26","modified":1614070706863},{"_id":"source/about/index.md","hash":"96ce0cd4ba462dffb01454957efc8ec1c03d022b","modified":1614070706864},{"_id":"source/tags/index.md","hash":"ddaf6bbed48da7034079b5f7ed67c2f51af764b0","modified":1614070706865},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1614070706867},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"b1ec000babd42bb7ffd26f5ad8aac9b5bec79ae5","modified":1614070706867},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1614070706868},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1614070706868},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1614070706874},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1614070706876},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1614070706875},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1614070706876},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1614070706879},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1614070706877},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1614070706878},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1614070706877},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1614070706880},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1614070706879},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1614070706879},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1614070706881},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1614070706883},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1614070706882},{"_id":"themes/next/languages/zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1614070706882},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1614070706883},{"_id":"themes/next/layout/_layout.swig","hash":"438414a1d765d338906d23592bd21ce8bd2afa24","modified":1614070706886},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1614070706924},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1614070706925},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1614070706924},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1614070706925},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1614070706924},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1614070706927},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1614070706927},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1614070706929},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1614070706930},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1614070707108},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1614070707111},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1614070707110},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1614070706993},{"_id":"source/_posts/Python3-Django2-xadmin项目踩坑记录/django1-1.png","hash":"232c6b8abf0a5dbdaae44cf3ff22a4f35e57e0d2","modified":1614070706856},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1614070706884},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1614070706885},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1614070706887},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1614070706887},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1614070706889},{"_id":"themes/next/layout/_macro/post.swig","hash":"4ba938822d56c597490f0731893eaa2443942e0f","modified":1614070706888},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1614070706888},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1614070706890},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1614070706889},{"_id":"themes/next/layout/_partials/footer.swig","hash":"e727e13fdc0dc5b3a1aa8c880d6d9aafcac46758","modified":1614070706890},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1614070706890},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1614070706892},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1614070706892},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1614070706893},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1614070706893},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1614070706902},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1614070706902},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1614070706905},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1614070706916},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1614070706916},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1614070706917},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1614070706917},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1614070706918},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1614070706920},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1614070706917},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1614070706931},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1614070706931},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1614070706932},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1614070706932},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1614070706933},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1614070706933},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1614070706934},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1614070706934},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1614070706935},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1614070706992},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1614070706994},{"_id":"themes/next/source/images/alipay.jpg","hash":"a247a969f2fb685367686daadb4872098da038f6","modified":1614070706995},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1614070706996},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1614070706996},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1614070706997},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1614070706998},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1614070706999},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1614070706999},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1614070707000},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1614070707000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1614070707001},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1614070707001},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1614070707002},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1614070707002},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1614070707002},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1614070707003},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1614070707004},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1614070707003},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1614070707003},{"_id":"source/_posts/Python实现BFS-DFS/BFS.png","hash":"abd730283f292cd237e3fdd1727f970f01455679","modified":1614070706861},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1614070706904},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1614070706904},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1614070706977},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1614070706977},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1614070706978},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1614070706990},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1614070706992},{"_id":"themes/next/source/images/wechatpay.jpg","hash":"df34cc7f590d664a42456ca04b7c17d0238921e6","modified":1614070707006},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1614070706891},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1614070706891},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1614070706898},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1614070706899},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1614070706899},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1614070706900},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1614070706900},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1614070706901},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1614070706901},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1614070706903},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1614070706904},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1614070706905},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1614070706906},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1614070706907},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1614070706908},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1614070706906},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1614070706907},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1614070706908},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1614070706909},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1614070706909},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1614070706910},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1614070706911},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1614070706911},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1614070706910},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1614070706912},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1614070706912},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1614070706913},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1614070706914},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1614070706914},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1614070706915},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1614070706913},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1614070706914},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1614070706916},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1614070706915},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1614070706922},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1614070706922},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1614070706922},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1614070706923},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1614070706976},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1614070706976},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1614070706978},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1614070706978},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1614070706990},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1614070706990},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1614070706991},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1614070706991},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1614070707008},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1614070707010},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1614070707008},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1614070707008},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1614070707010},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1614070707012},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1614070707011},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1614070707012},{"_id":"themes/next/source/js/src/love.js","hash":"6583037545c7edc355f76f29b3393e250b150032","modified":1614070707011},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1614070707013},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1614070707014},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1614070707014},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1614070707024},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1614070707030},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1614070707031},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1614070707042},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1614070707042},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1614070707043},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1614070707044},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1614070707049},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1614070707050},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1614070707048},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1614070707049},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1614070707067},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1614070707050},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1614070707070},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1614070707072},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1614070707071},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1614070707073},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1614070707071},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1614070707072},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1614070707075},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1614070707074},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1614070707077},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1614070707076},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1614070707078},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1614070707077},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1614070707078},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1614070707081},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1614070707079},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1614070707080},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1614070707079},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1614070707080},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1614070707082},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1614070707083},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1614070707081},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1614070707082},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1614070707083},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1614070707084},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1614070707085},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1614070707086},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1614070707096},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1614070707096},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1614070707107},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1614070707102},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1614070707105},{"_id":"source/_posts/Hexo博客中插入图片/psj.jpeg","hash":"49bcde6aff7738307064b371b57681b90dbcac14","modified":1614070706854},{"_id":"source/_posts/Python3-Django2-xadmin项目踩坑记录/django1-2.png","hash":"28c24718d313c973ea6f6118a3653c2400fca516","modified":1614070706859},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1614070707069},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1614070706921},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1614070706921},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1614070706936},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1614070706936},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1614070706939},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1614070706939},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1614070706940},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1614070706949},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1614070706961},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1614070706970},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1614070706971},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1614070706971},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1614070706972},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1614070706974},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1614070706972},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1614070706975},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1614070706980},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1614070706980},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1614070706981},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1614070706981},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1614070706981},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1614070706982},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1614070706982},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1614070706983},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1614070706985},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1614070706986},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1614070706985},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"a98ad885ee4f48d85b2578a0b9c2bbf166e96733","modified":1614070706985},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1614070706986},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1614070706987},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1614070706988},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1614070706987},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1614070706989},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1614070706988},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1614070706988},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1614070707013},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1614070707022},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1614070707023},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1614070707019},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1614070707032},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1614070707032},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1614070707035},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1614070707039},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1614070707040},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1614070707041},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1614070707034},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1614070707033},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1614070707034},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1614070707047},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1614070707051},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1614070707052},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1614070707094},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1614070707095},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1614070707021},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1614070707046},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1614070707065},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1614070707053},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1614070707067},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1614070707101},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1614070706940},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1614070706941},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1614070706941},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1614070706943},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1614070706944},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1614070706945},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1614070706944},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1614070706947},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1614070706945},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1614070706947},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1614070706946},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1614070706948},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1614070706948},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1614070706950},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1614070706949},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1614070706951},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1614070706951},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1614070706950},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1614070706952},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1614070706951},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1614070706954},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1614070706954},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1614070706952},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1614070706955},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1614070706955},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1614070706953},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1614070706955},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1614070706953},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1614070706957},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1614070706957},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1614070706956},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1614070706957},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1614070706958},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1614070706958},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1614070706959},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1614070706961},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1614070706960},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1614070706960},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1614070706961},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1614070706962},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1614070706963},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1614070706963},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1614070706962},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1614070706963},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1614070706965},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1614070706964},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1614070706965},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1614070706966},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1614070706965},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1614070706967},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1614070706966},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1614070706967},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1614070706968},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1614070706967},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1614070706968},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1614070706969},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1614070706970},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1614070706969},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1614070706983},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1614070706984},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1614070706986},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1614070707016},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1614070707016},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1614070707017},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1614070707017},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1614070707018},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1614070707035},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1614070707036},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1614070707037},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1614070707038},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1614070707038},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1614070707039},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1614070707055},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1614070707058},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1614070707064},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1614070707029},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1614070707093},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1614070707062}],"Category":[{"name":"Hexo","_id":"ckm4ekyo80006esw40iwfomr4"},{"name":"Python","_id":"ckm4ekyp0000fesw4vpywwfrd"},{"name":"随想","_id":"ckm4ekyp8000oesw4jttvajfh"},{"name":"云","_id":"ckm4ekyp9000resw4hjm42sib"},{"name":"算法","parent":"ckm4ekyp0000fesw4vpywwfrd","_id":"ckm4ekypb000wesw4ni563ypi"}],"Data":[],"Page":[{"title":"分类","date":"2019-03-16T14:03:09.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2019-03-16 22:03:09\ntype: \"categories\"\n---\n","updated":"2021-02-23T08:58:26.864Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckm4ekynm0001esw4ast9o0go","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"个人简介","date":"2019-03-16T14:05:27.000Z","_content":"\n##  Alroy\n## 面对大河我无限惭愧 我年华虚度 空有一身疲倦 和所有以梦为马的诗人一样 岁月易逝 一滴不剩\n## 年龄: Current-Year - 1997.11.11\n## 性别: 男\n## 星座: 天蝎座\n## 故乡: 安徽省蚌埠市\n## 高中: 安徽省怀远县第一中学\n## Dream_Car: 991.2版 Porsche 911 Turbo S Cabriolet\n## 本科: [安徽工业大学](http://www.ahut.edu.cn)\n## 邮箱: sjpgmoe@gmail.com\n## 喜欢的城市:重庆,四川,上海,西藏,北京.\n### QQ:  ` base64 -d <<< “MzQ3NjI1MDIz” `\n\n喜欢的东西:\n  `\t写代码,摄影,游泳,跑步,古典音乐,纪录片,深度学习,哲学,神经网络,数据分析,旅行,北欧,火锅,喵,汪,高配置的电脑,埙,钢琴,民乐,耳机. `\n","source":"about/index.md","raw":"---\ntitle: 个人简介\ndate: 2019-03-16 22:05:27\n---\n\n##  Alroy\n## 面对大河我无限惭愧 我年华虚度 空有一身疲倦 和所有以梦为马的诗人一样 岁月易逝 一滴不剩\n## 年龄: Current-Year - 1997.11.11\n## 性别: 男\n## 星座: 天蝎座\n## 故乡: 安徽省蚌埠市\n## 高中: 安徽省怀远县第一中学\n## Dream_Car: 991.2版 Porsche 911 Turbo S Cabriolet\n## 本科: [安徽工业大学](http://www.ahut.edu.cn)\n## 邮箱: sjpgmoe@gmail.com\n## 喜欢的城市:重庆,四川,上海,西藏,北京.\n### QQ:  ` base64 -d <<< “MzQ3NjI1MDIz” `\n\n喜欢的东西:\n  `\t写代码,摄影,游泳,跑步,古典音乐,纪录片,深度学习,哲学,神经网络,数据分析,旅行,北欧,火锅,喵,汪,高配置的电脑,埙,钢琴,民乐,耳机. `\n","updated":"2021-02-23T08:58:26.864Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckm4ekynr0003esw4zqjwxgxa","content":"<h2 id=\"Alroy\"><a href=\"#Alroy\" class=\"headerlink\" title=\"Alroy\"></a>Alroy</h2><h2 id=\"面对大河我无限惭愧-我年华虚度-空有一身疲倦-和所有以梦为马的诗人一样-岁月易逝-一滴不剩\"><a href=\"#面对大河我无限惭愧-我年华虚度-空有一身疲倦-和所有以梦为马的诗人一样-岁月易逝-一滴不剩\" class=\"headerlink\" title=\"面对大河我无限惭愧 我年华虚度 空有一身疲倦 和所有以梦为马的诗人一样 岁月易逝 一滴不剩\"></a>面对大河我无限惭愧 我年华虚度 空有一身疲倦 和所有以梦为马的诗人一样 岁月易逝 一滴不剩</h2><h2 id=\"年龄-Current-Year-1997-11-11\"><a href=\"#年龄-Current-Year-1997-11-11\" class=\"headerlink\" title=\"年龄: Current-Year - 1997.11.11\"></a>年龄: Current-Year - 1997.11.11</h2><h2 id=\"性别-男\"><a href=\"#性别-男\" class=\"headerlink\" title=\"性别: 男\"></a>性别: 男</h2><h2 id=\"星座-天蝎座\"><a href=\"#星座-天蝎座\" class=\"headerlink\" title=\"星座: 天蝎座\"></a>星座: 天蝎座</h2><h2 id=\"故乡-安徽省蚌埠市\"><a href=\"#故乡-安徽省蚌埠市\" class=\"headerlink\" title=\"故乡: 安徽省蚌埠市\"></a>故乡: 安徽省蚌埠市</h2><h2 id=\"高中-安徽省怀远县第一中学\"><a href=\"#高中-安徽省怀远县第一中学\" class=\"headerlink\" title=\"高中: 安徽省怀远县第一中学\"></a>高中: 安徽省怀远县第一中学</h2><h2 id=\"Dream-Car-991-2版-Porsche-911-Turbo-S-Cabriolet\"><a href=\"#Dream-Car-991-2版-Porsche-911-Turbo-S-Cabriolet\" class=\"headerlink\" title=\"Dream_Car: 991.2版 Porsche 911 Turbo S Cabriolet\"></a>Dream_Car: 991.2版 Porsche 911 Turbo S Cabriolet</h2><h2 id=\"本科-安徽工业大学\"><a href=\"#本科-安徽工业大学\" class=\"headerlink\" title=\"本科: 安徽工业大学\"></a>本科: <a href=\"http://www.ahut.edu.cn\" target=\"_blank\" rel=\"noopener\">安徽工业大学</a></h2><h2 id=\"邮箱-sjpgmoe-gmail-com\"><a href=\"#邮箱-sjpgmoe-gmail-com\" class=\"headerlink\" title=\"邮箱: sjpgmoe@gmail.com\"></a>邮箱: <a href=\"mailto:sjpgmoe@gmail.com\" target=\"_blank\" rel=\"noopener\">sjpgmoe@gmail.com</a></h2><h2 id=\"喜欢的城市-重庆-四川-上海-西藏-北京\"><a href=\"#喜欢的城市-重庆-四川-上海-西藏-北京\" class=\"headerlink\" title=\"喜欢的城市:重庆,四川,上海,西藏,北京.\"></a>喜欢的城市:重庆,四川,上海,西藏,北京.</h2><h3 id=\"QQ-base64-d-lt-lt-lt-“MzQ3NjI1MDIz”\"><a href=\"#QQ-base64-d-lt-lt-lt-“MzQ3NjI1MDIz”\" class=\"headerlink\" title=\"QQ:  base64 -d &lt;&lt;&lt; “MzQ3NjI1MDIz”\"></a>QQ:  <code>base64 -d &lt;&lt;&lt; “MzQ3NjI1MDIz”</code></h3><p>喜欢的东西:<br>  <code>写代码,摄影,游泳,跑步,古典音乐,纪录片,深度学习,哲学,神经网络,数据分析,旅行,北欧,火锅,喵,汪,高配置的电脑,埙,钢琴,民乐,耳机.</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Alroy\"><a href=\"#Alroy\" class=\"headerlink\" title=\"Alroy\"></a>Alroy</h2><h2 id=\"面对大河我无限惭愧-我年华虚度-空有一身疲倦-和所有以梦为马的诗人一样-岁月易逝-一滴不剩\"><a href=\"#面对大河我无限惭愧-我年华虚度-空有一身疲倦-和所有以梦为马的诗人一样-岁月易逝-一滴不剩\" class=\"headerlink\" title=\"面对大河我无限惭愧 我年华虚度 空有一身疲倦 和所有以梦为马的诗人一样 岁月易逝 一滴不剩\"></a>面对大河我无限惭愧 我年华虚度 空有一身疲倦 和所有以梦为马的诗人一样 岁月易逝 一滴不剩</h2><h2 id=\"年龄-Current-Year-1997-11-11\"><a href=\"#年龄-Current-Year-1997-11-11\" class=\"headerlink\" title=\"年龄: Current-Year - 1997.11.11\"></a>年龄: Current-Year - 1997.11.11</h2><h2 id=\"性别-男\"><a href=\"#性别-男\" class=\"headerlink\" title=\"性别: 男\"></a>性别: 男</h2><h2 id=\"星座-天蝎座\"><a href=\"#星座-天蝎座\" class=\"headerlink\" title=\"星座: 天蝎座\"></a>星座: 天蝎座</h2><h2 id=\"故乡-安徽省蚌埠市\"><a href=\"#故乡-安徽省蚌埠市\" class=\"headerlink\" title=\"故乡: 安徽省蚌埠市\"></a>故乡: 安徽省蚌埠市</h2><h2 id=\"高中-安徽省怀远县第一中学\"><a href=\"#高中-安徽省怀远县第一中学\" class=\"headerlink\" title=\"高中: 安徽省怀远县第一中学\"></a>高中: 安徽省怀远县第一中学</h2><h2 id=\"Dream-Car-991-2版-Porsche-911-Turbo-S-Cabriolet\"><a href=\"#Dream-Car-991-2版-Porsche-911-Turbo-S-Cabriolet\" class=\"headerlink\" title=\"Dream_Car: 991.2版 Porsche 911 Turbo S Cabriolet\"></a>Dream_Car: 991.2版 Porsche 911 Turbo S Cabriolet</h2><h2 id=\"本科-安徽工业大学\"><a href=\"#本科-安徽工业大学\" class=\"headerlink\" title=\"本科: 安徽工业大学\"></a>本科: <a href=\"http://www.ahut.edu.cn\" target=\"_blank\" rel=\"noopener\">安徽工业大学</a></h2><h2 id=\"邮箱-sjpgmoe-gmail-com\"><a href=\"#邮箱-sjpgmoe-gmail-com\" class=\"headerlink\" title=\"邮箱: sjpgmoe@gmail.com\"></a>邮箱: <a href=\"mailto:sjpgmoe@gmail.com\" target=\"_blank\" rel=\"noopener\">sjpgmoe@gmail.com</a></h2><h2 id=\"喜欢的城市-重庆-四川-上海-西藏-北京\"><a href=\"#喜欢的城市-重庆-四川-上海-西藏-北京\" class=\"headerlink\" title=\"喜欢的城市:重庆,四川,上海,西藏,北京.\"></a>喜欢的城市:重庆,四川,上海,西藏,北京.</h2><h3 id=\"QQ-base64-d-lt-lt-lt-“MzQ3NjI1MDIz”\"><a href=\"#QQ-base64-d-lt-lt-lt-“MzQ3NjI1MDIz”\" class=\"headerlink\" title=\"QQ:  base64 -d &lt;&lt;&lt; “MzQ3NjI1MDIz”\"></a>QQ:  <code>base64 -d &lt;&lt;&lt; “MzQ3NjI1MDIz”</code></h3><p>喜欢的东西:<br>  <code>写代码,摄影,游泳,跑步,古典音乐,纪录片,深度学习,哲学,神经网络,数据分析,旅行,北欧,火锅,喵,汪,高配置的电脑,埙,钢琴,民乐,耳机.</code></p>\n"},{"title":"标签","date":"2019-03-16T13:36:42.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2019-03-16 21:36:42\ntype: tags\n---\n","updated":"2021-02-23T08:58:26.865Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckm4ekyny0005esw49sjhtvke","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Anaconda笔记","date":"2019-05-25T12:35:07.000Z","_content":"\nconda install nb_conda\n\n","source":"_posts/Anaconda笔记.md","raw":"---\ntitle: Anaconda笔记\ndate: 2019-05-25 20:35:07\ntags:\n---\n\nconda install nb_conda\n\n","slug":"Anaconda笔记","published":1,"updated":"2021-02-23T08:58:26.851Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckm4ekynd0000esw4n2uiwuz7","content":"<p>conda install nb_conda</p>\n","site":{"data":{}},"excerpt":"","more":"<p>conda install nb_conda</p>\n"},{"title":"Hexo-Deploy-ssh-Permission-denied","date":"2019-03-19T09:51:00.000Z","_content":"\n# 问题描述:使用hexo发布博客,配置完成之后执行 `hexo g -d` 出现如下错误\n```\ngit@github.com: Permission denied (publickey).\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\nFATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html\nError: Spawn failed\n    at ChildProcess.<anonymous> (/home/alroy/Github/hexo-next/node_modules/hexo-util/lib/spawn.js:52:19)\n    at emitTwo (events.js:126:13)\n    at ChildProcess.emit (events.js:214:7)\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:198:12)\n```\n\n简单Google一下之后,发现是Github上没有密钥的原因\n\\> ls ~/.ssh/\n\\> ssh-keygen -t rsa -C “youremail”\n\\> cat ~/.ssh/id\\_rsa.pub\n\n登录github后，进入个人设置settings---\\>ssh and gpg keys--\\>new ssh key 添加即可。title自行命名\n","source":"_posts/Hexo-Deploy-ssh-Permission-denied.md","raw":"---\ntitle: Hexo-Deploy-ssh-Permission-denied\ndate: 2019-03-19 17:51:00\ntags: [Hexo,Github]\ncategories: Hexo\n---\n\n# 问题描述:使用hexo发布博客,配置完成之后执行 `hexo g -d` 出现如下错误\n```\ngit@github.com: Permission denied (publickey).\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\nFATAL Something's wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html\nError: Spawn failed\n    at ChildProcess.<anonymous> (/home/alroy/Github/hexo-next/node_modules/hexo-util/lib/spawn.js:52:19)\n    at emitTwo (events.js:126:13)\n    at ChildProcess.emit (events.js:214:7)\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:198:12)\n```\n\n简单Google一下之后,发现是Github上没有密钥的原因\n\\> ls ~/.ssh/\n\\> ssh-keygen -t rsa -C “youremail”\n\\> cat ~/.ssh/id\\_rsa.pub\n\n登录github后，进入个人设置settings---\\>ssh and gpg keys--\\>new ssh key 添加即可。title自行命名\n","slug":"Hexo-Deploy-ssh-Permission-denied","published":1,"updated":"2021-02-23T08:58:26.852Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckm4ekyno0002esw45v7grwwz","content":"<h1 id=\"问题描述-使用hexo发布博客-配置完成之后执行-hexo-g-d-出现如下错误\"><a href=\"#问题描述-使用hexo发布博客-配置完成之后执行-hexo-g-d-出现如下错误\" class=\"headerlink\" title=\"问题描述:使用hexo发布博客,配置完成之后执行 hexo g -d 出现如下错误\"></a>问题描述:使用hexo发布博客,配置完成之后执行 <code>hexo g -d</code> 出现如下错误</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git@github.com: Permission denied (publickey).</span><br><span class=\"line\">fatal: Could not read from remote repository.</span><br><span class=\"line\"></span><br><span class=\"line\">Please make sure you have the correct access rights</span><br><span class=\"line\">and the repository exists.</span><br><span class=\"line\">FATAL Something&apos;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</span><br><span class=\"line\">Error: Spawn failed</span><br><span class=\"line\">    at ChildProcess.&lt;anonymous&gt; (/home/alroy/Github/hexo-next/node_modules/hexo-util/lib/spawn.js:52:19)</span><br><span class=\"line\">    at emitTwo (events.js:126:13)</span><br><span class=\"line\">    at ChildProcess.emit (events.js:214:7)</span><br><span class=\"line\">    at Process.ChildProcess._handle.onexit (internal/child_process.js:198:12)</span><br></pre></td></tr></table></figure>\n<p>简单Google一下之后,发现是Github上没有密钥的原因<br>> ls ~/.ssh/<br>> ssh-keygen -t rsa -C “youremail”<br>> cat ~/.ssh/id_rsa.pub</p>\n<p>登录github后，进入个人设置settings—>ssh and gpg keys–>new ssh key 添加即可。title自行命名</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"问题描述-使用hexo发布博客-配置完成之后执行-hexo-g-d-出现如下错误\"><a href=\"#问题描述-使用hexo发布博客-配置完成之后执行-hexo-g-d-出现如下错误\" class=\"headerlink\" title=\"问题描述:使用hexo发布博客,配置完成之后执行 hexo g -d 出现如下错误\"></a>问题描述:使用hexo发布博客,配置完成之后执行 <code>hexo g -d</code> 出现如下错误</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git@github.com: Permission denied (publickey).</span><br><span class=\"line\">fatal: Could not read from remote repository.</span><br><span class=\"line\"></span><br><span class=\"line\">Please make sure you have the correct access rights</span><br><span class=\"line\">and the repository exists.</span><br><span class=\"line\">FATAL Something&apos;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</span><br><span class=\"line\">Error: Spawn failed</span><br><span class=\"line\">    at ChildProcess.&lt;anonymous&gt; (/home/alroy/Github/hexo-next/node_modules/hexo-util/lib/spawn.js:52:19)</span><br><span class=\"line\">    at emitTwo (events.js:126:13)</span><br><span class=\"line\">    at ChildProcess.emit (events.js:214:7)</span><br><span class=\"line\">    at Process.ChildProcess._handle.onexit (internal/child_process.js:198:12)</span><br></pre></td></tr></table></figure>\n<p>简单Google一下之后,发现是Github上没有密钥的原因<br>> ls ~/.ssh/<br>> ssh-keygen -t rsa -C “youremail”<br>> cat ~/.ssh/id_rsa.pub</p>\n<p>登录github后，进入个人设置settings—>ssh and gpg keys–>new ssh key 添加即可。title自行命名</p>\n"},{"title":"Hexo博客中插入图片","date":"2019-04-06T05:45:59.000Z","_content":"\n# hexo博客中如何插入图片\n## 1. 将根目录下的配置文件 ` _config.yml ` 中的`post_asset_folder`选项设置`true`\n```\n # Writing\n 42 new_post_name: :title.md # File name of new posts\n 43 default_layout: post\n 44 titlecase: false # Transform title into titlecase\n 45 external_link: true # Open external links in new tab\n 46 filename_case: 0\n 47 render_drafts: false\n 48 post_asset_folder: true\n 49 relative_link: false\n 50 future: true\n 51 highlight:\n 52   enable: true\n 53   line_number: true\n 54   auto_detect: false\n 55   tab_replace:\n\n```\n## 2. 在你的hexo目录下执行这句话npm install hexo-asset-image --save，这是下载安装一个可以上传本地图片的插件：\n```\n(base)  alroy@Alan  ~/Github/hexo-next  sudo proxychains4 npm install hexo-asset-image --save\n[sudo] password for alroy: \n[proxychains] config file found: /etc/proxychains.conf\n[proxychains] preloading /usr/lib/libproxychains4.so\n[proxychains] DLL init: proxychains-ng 4.13-git-10-g1198857\n[proxychains] DLL init: proxychains-ng 4.13-git-10-g1198857\n[proxychains] Strict chain  ...  127.0.0.1:1090  ...  registry.npmjs.org:443  ...  OK\n[proxychains] Strict chain  ...  127.0.0.1:1090  ...  registry.npmjs.org:443  ...  OK\n[proxychains] Strict chain  ...  127.0.0.1:1090  ...  registry.npmjs.org:443  ...  OK\n[proxychains] Strict chain  ...  127.0.0.1:1090  ...  registry.npmjs.org:443  ...  OK\nnpm WARN babel-eslint@10.0.1 requires a peer of eslint@>= 4.12.1 but none is installed. You must install peer dependencies yourself.\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.7 (node_modules/fsevents):\nnpm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.7: wanted {\"os\":\"darwin\",\"arch\":\"any\"} (current: {\"os\":\"linux\",\"arch\":\"x64\"})\n\n+ hexo-asset-image@0.0.3\nadded 13 packages from 11 contributors in 22.144s\n\n```\n\n## 3. 下载完成之后,下次执行 `hexo new post Hexo博客中插入图片`生成博客文章时, 会在`/source/_posts`下生成一个同名文件夹\n```\n(base)  alroy@Alan  ~/Github/hexo-next/source/_posts  tree\n.\n├── hello-world.md\n├── Hexo-Deploy-ssh-Permission-denied.md\n├── Hexo博客中插入图片\n├── Hexo博客中插入图片.md\n├── Python实现BFS和DFS.md\n└── 海子逝世三十周年.md\n\n1 directory, 5 files\n\n```\n\n## 4. 在文章中想引入图片时, 将图片先复制到相应的文件夹中, 再使用MarkDown语法将图片插入至文章中\n> ![This is Test!](Hexo博客中插入图片/psj.jpeg)\n\n## 5. 5 最后检查一下，hexo g生成页面后，进入public\\2019\\04\\06\\index.html文件中查看相关字段，可以发现，html标签内的语句是`<img src=\"2019/04/06/xxxx/图片名.jpg\">`，而不是`<img src=\"xxxx/图片名.jpg>`。这很重要，关乎你的网页是否可以真正加载你想插入的图片。","source":"_posts/Hexo博客中插入图片.md","raw":"---\ntitle: Hexo博客中插入图片\ndate: 2019-04-06 13:45:59\ntags: [Hexo]\ncategories: Hexo\n---\n\n# hexo博客中如何插入图片\n## 1. 将根目录下的配置文件 ` _config.yml ` 中的`post_asset_folder`选项设置`true`\n```\n # Writing\n 42 new_post_name: :title.md # File name of new posts\n 43 default_layout: post\n 44 titlecase: false # Transform title into titlecase\n 45 external_link: true # Open external links in new tab\n 46 filename_case: 0\n 47 render_drafts: false\n 48 post_asset_folder: true\n 49 relative_link: false\n 50 future: true\n 51 highlight:\n 52   enable: true\n 53   line_number: true\n 54   auto_detect: false\n 55   tab_replace:\n\n```\n## 2. 在你的hexo目录下执行这句话npm install hexo-asset-image --save，这是下载安装一个可以上传本地图片的插件：\n```\n(base)  alroy@Alan  ~/Github/hexo-next  sudo proxychains4 npm install hexo-asset-image --save\n[sudo] password for alroy: \n[proxychains] config file found: /etc/proxychains.conf\n[proxychains] preloading /usr/lib/libproxychains4.so\n[proxychains] DLL init: proxychains-ng 4.13-git-10-g1198857\n[proxychains] DLL init: proxychains-ng 4.13-git-10-g1198857\n[proxychains] Strict chain  ...  127.0.0.1:1090  ...  registry.npmjs.org:443  ...  OK\n[proxychains] Strict chain  ...  127.0.0.1:1090  ...  registry.npmjs.org:443  ...  OK\n[proxychains] Strict chain  ...  127.0.0.1:1090  ...  registry.npmjs.org:443  ...  OK\n[proxychains] Strict chain  ...  127.0.0.1:1090  ...  registry.npmjs.org:443  ...  OK\nnpm WARN babel-eslint@10.0.1 requires a peer of eslint@>= 4.12.1 but none is installed. You must install peer dependencies yourself.\nnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.7 (node_modules/fsevents):\nnpm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.7: wanted {\"os\":\"darwin\",\"arch\":\"any\"} (current: {\"os\":\"linux\",\"arch\":\"x64\"})\n\n+ hexo-asset-image@0.0.3\nadded 13 packages from 11 contributors in 22.144s\n\n```\n\n## 3. 下载完成之后,下次执行 `hexo new post Hexo博客中插入图片`生成博客文章时, 会在`/source/_posts`下生成一个同名文件夹\n```\n(base)  alroy@Alan  ~/Github/hexo-next/source/_posts  tree\n.\n├── hello-world.md\n├── Hexo-Deploy-ssh-Permission-denied.md\n├── Hexo博客中插入图片\n├── Hexo博客中插入图片.md\n├── Python实现BFS和DFS.md\n└── 海子逝世三十周年.md\n\n1 directory, 5 files\n\n```\n\n## 4. 在文章中想引入图片时, 将图片先复制到相应的文件夹中, 再使用MarkDown语法将图片插入至文章中\n> ![This is Test!](Hexo博客中插入图片/psj.jpeg)\n\n## 5. 5 最后检查一下，hexo g生成页面后，进入public\\2019\\04\\06\\index.html文件中查看相关字段，可以发现，html标签内的语句是`<img src=\"2019/04/06/xxxx/图片名.jpg\">`，而不是`<img src=\"xxxx/图片名.jpg>`。这很重要，关乎你的网页是否可以真正加载你想插入的图片。","slug":"Hexo博客中插入图片","published":1,"updated":"2021-02-23T08:58:26.852Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckm4ekynv0004esw4p2et9ykj","content":"<h1 id=\"hexo博客中如何插入图片\"><a href=\"#hexo博客中如何插入图片\" class=\"headerlink\" title=\"hexo博客中如何插入图片\"></a>hexo博客中如何插入图片</h1><h2 id=\"1-将根目录下的配置文件-config-yml-中的post-asset-folder选项设置true\"><a href=\"#1-将根目录下的配置文件-config-yml-中的post-asset-folder选项设置true\" class=\"headerlink\" title=\"1. 将根目录下的配置文件 _config.yml 中的post_asset_folder选项设置true\"></a>1. 将根目录下的配置文件 <code>_config.yml</code> 中的<code>post_asset_folder</code>选项设置<code>true</code></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Writing</span><br><span class=\"line\">42 new_post_name: :title.md # File name of new posts</span><br><span class=\"line\">43 default_layout: post</span><br><span class=\"line\">44 titlecase: false # Transform title into titlecase</span><br><span class=\"line\">45 external_link: true # Open external links in new tab</span><br><span class=\"line\">46 filename_case: 0</span><br><span class=\"line\">47 render_drafts: false</span><br><span class=\"line\">48 post_asset_folder: true</span><br><span class=\"line\">49 relative_link: false</span><br><span class=\"line\">50 future: true</span><br><span class=\"line\">51 highlight:</span><br><span class=\"line\">52   enable: true</span><br><span class=\"line\">53   line_number: true</span><br><span class=\"line\">54   auto_detect: false</span><br><span class=\"line\">55   tab_replace:</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-在你的hexo目录下执行这句话npm-install-hexo-asset-image-–save，这是下载安装一个可以上传本地图片的插件：\"><a href=\"#2-在你的hexo目录下执行这句话npm-install-hexo-asset-image-–save，这是下载安装一个可以上传本地图片的插件：\" class=\"headerlink\" title=\"2. 在你的hexo目录下执行这句话npm install hexo-asset-image –save，这是下载安装一个可以上传本地图片的插件：\"></a>2. 在你的hexo目录下执行这句话npm install hexo-asset-image –save，这是下载安装一个可以上传本地图片的插件：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(base)  alroy@Alan  ~/Github/hexo-next  sudo proxychains4 npm install hexo-asset-image --save</span><br><span class=\"line\">[sudo] password for alroy: </span><br><span class=\"line\">[proxychains] config file found: /etc/proxychains.conf</span><br><span class=\"line\">[proxychains] preloading /usr/lib/libproxychains4.so</span><br><span class=\"line\">[proxychains] DLL init: proxychains-ng 4.13-git-10-g1198857</span><br><span class=\"line\">[proxychains] DLL init: proxychains-ng 4.13-git-10-g1198857</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1090  ...  registry.npmjs.org:443  ...  OK</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1090  ...  registry.npmjs.org:443  ...  OK</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1090  ...  registry.npmjs.org:443  ...  OK</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1090  ...  registry.npmjs.org:443  ...  OK</span><br><span class=\"line\">npm WARN babel-eslint@10.0.1 requires a peer of eslint@&gt;= 4.12.1 but none is installed. You must install peer dependencies yourself.</span><br><span class=\"line\">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.7 (node_modules/fsevents):</span><br><span class=\"line\">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.7: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;linux&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">+ hexo-asset-image@0.0.3</span><br><span class=\"line\">added 13 packages from 11 contributors in 22.144s</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-下载完成之后-下次执行-hexo-new-post-Hexo博客中插入图片生成博客文章时-会在-source-posts下生成一个同名文件夹\"><a href=\"#3-下载完成之后-下次执行-hexo-new-post-Hexo博客中插入图片生成博客文章时-会在-source-posts下生成一个同名文件夹\" class=\"headerlink\" title=\"3. 下载完成之后,下次执行 hexo new post Hexo博客中插入图片生成博客文章时, 会在/source/_posts下生成一个同名文件夹\"></a>3. 下载完成之后,下次执行 <code>hexo new post Hexo博客中插入图片</code>生成博客文章时, 会在<code>/source/_posts</code>下生成一个同名文件夹</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(base)  alroy@Alan  ~/Github/hexo-next/source/_posts  tree</span><br><span class=\"line\">.</span><br><span class=\"line\">├── hello-world.md</span><br><span class=\"line\">├── Hexo-Deploy-ssh-Permission-denied.md</span><br><span class=\"line\">├── Hexo博客中插入图片</span><br><span class=\"line\">├── Hexo博客中插入图片.md</span><br><span class=\"line\">├── Python实现BFS和DFS.md</span><br><span class=\"line\">└── 海子逝世三十周年.md</span><br><span class=\"line\"></span><br><span class=\"line\">1 directory, 5 files</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-在文章中想引入图片时-将图片先复制到相应的文件夹中-再使用MarkDown语法将图片插入至文章中\"><a href=\"#4-在文章中想引入图片时-将图片先复制到相应的文件夹中-再使用MarkDown语法将图片插入至文章中\" class=\"headerlink\" title=\"4. 在文章中想引入图片时, 将图片先复制到相应的文件夹中, 再使用MarkDown语法将图片插入至文章中\"></a>4. 在文章中想引入图片时, 将图片先复制到相应的文件夹中, 再使用MarkDown语法将图片插入至文章中</h2><blockquote>\n<p><img src=\"/2019/04/06/Hexo博客中插入图片/psj.jpeg\" alt=\"This is Test!\"></p>\n</blockquote>\n<h2 id=\"5-5-最后检查一下，hexo-g生成页面后，进入public-2019-04-06-index-html文件中查看相关字段，可以发现，html标签内的语句是-lt-img-src-quot-2019-04-06-xxxx-图片名-jpg-quot-gt-，而不是-lt-img-src-quot-xxxx-图片名-jpg-gt-。这很重要，关乎你的网页是否可以真正加载你想插入的图片。\"><a href=\"#5-5-最后检查一下，hexo-g生成页面后，进入public-2019-04-06-index-html文件中查看相关字段，可以发现，html标签内的语句是-lt-img-src-quot-2019-04-06-xxxx-图片名-jpg-quot-gt-，而不是-lt-img-src-quot-xxxx-图片名-jpg-gt-。这很重要，关乎你的网页是否可以真正加载你想插入的图片。\" class=\"headerlink\" title=\"5. 5 最后检查一下，hexo g生成页面后，进入public\\2019\\04\\06\\index.html文件中查看相关字段，可以发现，html标签内的语句是&lt;img src=&quot;2019/04/06/xxxx/图片名.jpg&quot;&gt;，而不是&lt;img src=&quot;xxxx/图片名.jpg&gt;。这很重要，关乎你的网页是否可以真正加载你想插入的图片。\"></a>5. 5 最后检查一下，hexo g生成页面后，进入public\\2019\\04\\06\\index.html文件中查看相关字段，可以发现，html标签内的语句是<code>&lt;img src=&quot;2019/04/06/xxxx/图片名.jpg&quot;&gt;</code>，而不是<code>&lt;img src=&quot;xxxx/图片名.jpg&gt;</code>。这很重要，关乎你的网页是否可以真正加载你想插入的图片。</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"hexo博客中如何插入图片\"><a href=\"#hexo博客中如何插入图片\" class=\"headerlink\" title=\"hexo博客中如何插入图片\"></a>hexo博客中如何插入图片</h1><h2 id=\"1-将根目录下的配置文件-config-yml-中的post-asset-folder选项设置true\"><a href=\"#1-将根目录下的配置文件-config-yml-中的post-asset-folder选项设置true\" class=\"headerlink\" title=\"1. 将根目录下的配置文件 _config.yml 中的post_asset_folder选项设置true\"></a>1. 将根目录下的配置文件 <code>_config.yml</code> 中的<code>post_asset_folder</code>选项设置<code>true</code></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Writing</span><br><span class=\"line\">42 new_post_name: :title.md # File name of new posts</span><br><span class=\"line\">43 default_layout: post</span><br><span class=\"line\">44 titlecase: false # Transform title into titlecase</span><br><span class=\"line\">45 external_link: true # Open external links in new tab</span><br><span class=\"line\">46 filename_case: 0</span><br><span class=\"line\">47 render_drafts: false</span><br><span class=\"line\">48 post_asset_folder: true</span><br><span class=\"line\">49 relative_link: false</span><br><span class=\"line\">50 future: true</span><br><span class=\"line\">51 highlight:</span><br><span class=\"line\">52   enable: true</span><br><span class=\"line\">53   line_number: true</span><br><span class=\"line\">54   auto_detect: false</span><br><span class=\"line\">55   tab_replace:</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-在你的hexo目录下执行这句话npm-install-hexo-asset-image-–save，这是下载安装一个可以上传本地图片的插件：\"><a href=\"#2-在你的hexo目录下执行这句话npm-install-hexo-asset-image-–save，这是下载安装一个可以上传本地图片的插件：\" class=\"headerlink\" title=\"2. 在你的hexo目录下执行这句话npm install hexo-asset-image –save，这是下载安装一个可以上传本地图片的插件：\"></a>2. 在你的hexo目录下执行这句话npm install hexo-asset-image –save，这是下载安装一个可以上传本地图片的插件：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(base)  alroy@Alan  ~/Github/hexo-next  sudo proxychains4 npm install hexo-asset-image --save</span><br><span class=\"line\">[sudo] password for alroy: </span><br><span class=\"line\">[proxychains] config file found: /etc/proxychains.conf</span><br><span class=\"line\">[proxychains] preloading /usr/lib/libproxychains4.so</span><br><span class=\"line\">[proxychains] DLL init: proxychains-ng 4.13-git-10-g1198857</span><br><span class=\"line\">[proxychains] DLL init: proxychains-ng 4.13-git-10-g1198857</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1090  ...  registry.npmjs.org:443  ...  OK</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1090  ...  registry.npmjs.org:443  ...  OK</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1090  ...  registry.npmjs.org:443  ...  OK</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1090  ...  registry.npmjs.org:443  ...  OK</span><br><span class=\"line\">npm WARN babel-eslint@10.0.1 requires a peer of eslint@&gt;= 4.12.1 but none is installed. You must install peer dependencies yourself.</span><br><span class=\"line\">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.7 (node_modules/fsevents):</span><br><span class=\"line\">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.7: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;linux&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">+ hexo-asset-image@0.0.3</span><br><span class=\"line\">added 13 packages from 11 contributors in 22.144s</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-下载完成之后-下次执行-hexo-new-post-Hexo博客中插入图片生成博客文章时-会在-source-posts下生成一个同名文件夹\"><a href=\"#3-下载完成之后-下次执行-hexo-new-post-Hexo博客中插入图片生成博客文章时-会在-source-posts下生成一个同名文件夹\" class=\"headerlink\" title=\"3. 下载完成之后,下次执行 hexo new post Hexo博客中插入图片生成博客文章时, 会在/source/_posts下生成一个同名文件夹\"></a>3. 下载完成之后,下次执行 <code>hexo new post Hexo博客中插入图片</code>生成博客文章时, 会在<code>/source/_posts</code>下生成一个同名文件夹</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(base)  alroy@Alan  ~/Github/hexo-next/source/_posts  tree</span><br><span class=\"line\">.</span><br><span class=\"line\">├── hello-world.md</span><br><span class=\"line\">├── Hexo-Deploy-ssh-Permission-denied.md</span><br><span class=\"line\">├── Hexo博客中插入图片</span><br><span class=\"line\">├── Hexo博客中插入图片.md</span><br><span class=\"line\">├── Python实现BFS和DFS.md</span><br><span class=\"line\">└── 海子逝世三十周年.md</span><br><span class=\"line\"></span><br><span class=\"line\">1 directory, 5 files</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-在文章中想引入图片时-将图片先复制到相应的文件夹中-再使用MarkDown语法将图片插入至文章中\"><a href=\"#4-在文章中想引入图片时-将图片先复制到相应的文件夹中-再使用MarkDown语法将图片插入至文章中\" class=\"headerlink\" title=\"4. 在文章中想引入图片时, 将图片先复制到相应的文件夹中, 再使用MarkDown语法将图片插入至文章中\"></a>4. 在文章中想引入图片时, 将图片先复制到相应的文件夹中, 再使用MarkDown语法将图片插入至文章中</h2><blockquote>\n<p><img src=\"/2019/04/06/Hexo博客中插入图片/psj.jpeg\" alt=\"This is Test!\"></p>\n</blockquote>\n<h2 id=\"5-5-最后检查一下，hexo-g生成页面后，进入public-2019-04-06-index-html文件中查看相关字段，可以发现，html标签内的语句是-lt-img-src-quot-2019-04-06-xxxx-图片名-jpg-quot-gt-，而不是-lt-img-src-quot-xxxx-图片名-jpg-gt-。这很重要，关乎你的网页是否可以真正加载你想插入的图片。\"><a href=\"#5-5-最后检查一下，hexo-g生成页面后，进入public-2019-04-06-index-html文件中查看相关字段，可以发现，html标签内的语句是-lt-img-src-quot-2019-04-06-xxxx-图片名-jpg-quot-gt-，而不是-lt-img-src-quot-xxxx-图片名-jpg-gt-。这很重要，关乎你的网页是否可以真正加载你想插入的图片。\" class=\"headerlink\" title=\"5. 5 最后检查一下，hexo g生成页面后，进入public\\2019\\04\\06\\index.html文件中查看相关字段，可以发现，html标签内的语句是&lt;img src=&quot;2019/04/06/xxxx/图片名.jpg&quot;&gt;，而不是&lt;img src=&quot;xxxx/图片名.jpg&gt;。这很重要，关乎你的网页是否可以真正加载你想插入的图片。\"></a>5. 5 最后检查一下，hexo g生成页面后，进入public\\2019\\04\\06\\index.html文件中查看相关字段，可以发现，html标签内的语句是<code>&lt;img src=&quot;2019/04/06/xxxx/图片名.jpg&quot;&gt;</code>，而不是<code>&lt;img src=&quot;xxxx/图片名.jpg&gt;</code>。这很重要，关乎你的网页是否可以真正加载你想插入的图片。</h2>"},{"title":"Python3+Django2+xadmin项目踩坑记录","date":"2019-04-11T00:55:04.000Z","_content":"\n\n\n\n\n## Models的相关问题\n\n1. 先执行命令创建四个app\n ```\n   python manage.py startapp courses\n   python manage.py startapp users\n   python manage.py startapp operation\n   python manage.py startapp organization\n   ```\n   修改settings.py中INSTALLED_APPS模块,注册四个app\n```\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'courses',\n    'operation',\n    'organization',\n    'users',\n    'xadmin',\n    'crispy_forms',\n]\n\n\n```\n\n 创建UserProfile模型时,继承了AbstractUser类(`from django.contrib.auth.models import AbstractUser`)\n\n使用此类时需要在settings.py中添加一行代码\n\n> AUTH_USER_MODEL = 'users.UserProfile' \nusers是app的名字,UserProfile是users中models.py中类的名称\n\n2. 在models.py中定义类时,使用到外键,需要添加`on_delete=models.CASCADE` 来约束外键删除,\n\n3. 连接数据库:\n    - 先修改settings.py中的配置,\n    ![](Python3-Django2-xadmin项目踩坑记录/django1-2.png)\n    NAME是MySQL中database的名字, USER是数据库用户名,PASSWORD是数据库密码,\n    - 安装mysqlclient, 在pycharm中安装或者使用相应的包管理器安装,\n    - 执行\n    ```\n    python manage.py makemigrations\n    python manage.py migrate\n    ```\n    迁移数据库.\n\n4. 为了防止项目结构混乱,在根目录下建一个Python Package,将四个文件全部拖如文件中 ![如图](Python3-Django2-xadmin项目踩坑记录/django1-1.png)\n 两个复选框全部取消勾选,移动完成后会有一些包导入时路径不对,将apps右键 --> Mark Directory as --> sources root ,此时在Pycharm中run这个项目不会出现问题,在命令行中运行会因为根目录不正确出现错误.\n ```\n(base)  alroy@Alan  ~/PycharmProjects/RBQ  python manage.py runserver        \nUnhandled exception in thread started by <function check_errors.<locals>.wrapper at 0x7f557788fd90>\nTraceback (most recent call last):\n  File \"/home/alroy/anaconda3/lib/python3.7/site-packages/django/utils/autoreload.py\", line 225, in wrapper\n    fn(*args, **kwargs)\n  File \"/home/alroy/anaconda3/lib/python3.7/site-packages/django/core/management/commands/runserver.py\", line 109, in inner_run\n    autoreload.raise_last_exception()\n  File \"/home/alroy/anaconda3/lib/python3.7/site-packages/django/utils/autoreload.py\", line 248, in raise_last_exception\n    raise _exception[1]\n  File \"/home/alroy/anaconda3/lib/python3.7/site-packages/django/core/management/__init__.py\", line 337, in execute\n    autoreload.check_errors(django.setup)()\n  File \"/home/alroy/anaconda3/lib/python3.7/site-packages/django/utils/autoreload.py\", line 225, in wrapper\n    fn(*args, **kwargs)\n  File \"/home/alroy/anaconda3/lib/python3.7/site-packages/django/__init__.py\", line 24, in setup\n    apps.populate(settings.INSTALLED_APPS)\n  File \"/home/alroy/anaconda3/lib/python3.7/site-packages/django/apps/registry.py\", line 89, in populate\n    app_config = AppConfig.create(entry)\n  File \"/home/alroy/anaconda3/lib/python3.7/site-packages/django/apps/config.py\", line 90, in create\n    module = import_module(entry)\n  File \"/home/alroy/anaconda3/lib/python3.7/importlib/__init__.py\", line 127, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n  File \"<frozen importlib._bootstrap>\", line 1006, in _gcd_import\n  File \"<frozen importlib._bootstrap>\", line 983, in _find_and_load\n  File \"<frozen importlib._bootstrap>\", line 965, in _find_and_load_unlocked\nModuleNotFoundError: No module named 'users'\n\n ```\n\n在根目录的settings.py中添加两行代码\n```\nimport sys\nsys.path.insert(0,os.path.join(BASE_DIR, 'apps'))\n```\n`sys.path.insert(0,os.path.join(BASE_DIR, 'apps'))`定义搜索路径的优先顺序，序号从0开始，表示最大优先级，`sys.path.insert()`加入的也是临时搜索路径，程序退出后失效。\n\n## 安装xadmin\n\n1. xadmin的优点见[官网](http://sshwsfc.github.io/xadmin) \n\n\n这部分搞了半天,忘记去[Google](www.google.com)了,解决之后才发现自己很**,\n我安装方法是 直接`conda install -n django xadmin` 安装的是xadmin  0.6版本的,和Django2不兼容,运行会有各种神仙报错,就不贴截图了.\n2. xadmin的[Github](https://github.com/sshwsfc/xadmin)上给了Django2的安装方法,看到官网有安装方法,心中更是一万匹***奔腾而过,切换到对应的环境中\n`conda activate django`\n> pip install git+git://github.com/shwsfc/xadmin.git@django2\n\n## 配置用户上传media文件夹\n在settings.py中添加这两行代码将media文件夹添加到项目路\n径中,\n\n`MEDIA_URL = '/media/'`\n\n`MEDIA_ROOT = os.path.join(BASE_DIR, 'media')`\n\n在TEMPLATES部分的OPTIONS中加入\n`'django.template.context_processors.media',`\n即可在前端中使用((MEDIA_URL))('('替换成{)来访问用户上传的文件\n\n## 为每个app分配一个url\n\n在根目录的urls.py中设置url指向到organization下的urls\n文件,设置namespace为org,在organization下的urls中先\n声明 app_name='org'\n    \n    url(r'^org/', include('organization.urls',namespace='org')),\n\n将每个url设置name的好处,变更类名或者地址不需要修改前端页面的url配置(前端使用url方法`(%url 'org:test'%)`('('小括号替换为大括号))\n","source":"_posts/Python3-Django2-xadmin项目踩坑记录.md","raw":"---\ntitle: Python3+Django2+xadmin项目踩坑记录\ndate: 2019-04-11 08:55:04\ntags: [Python, Django]\ncategories: [Python]\n---\n\n\n\n\n\n## Models的相关问题\n\n1. 先执行命令创建四个app\n ```\n   python manage.py startapp courses\n   python manage.py startapp users\n   python manage.py startapp operation\n   python manage.py startapp organization\n   ```\n   修改settings.py中INSTALLED_APPS模块,注册四个app\n```\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'courses',\n    'operation',\n    'organization',\n    'users',\n    'xadmin',\n    'crispy_forms',\n]\n\n\n```\n\n 创建UserProfile模型时,继承了AbstractUser类(`from django.contrib.auth.models import AbstractUser`)\n\n使用此类时需要在settings.py中添加一行代码\n\n> AUTH_USER_MODEL = 'users.UserProfile' \nusers是app的名字,UserProfile是users中models.py中类的名称\n\n2. 在models.py中定义类时,使用到外键,需要添加`on_delete=models.CASCADE` 来约束外键删除,\n\n3. 连接数据库:\n    - 先修改settings.py中的配置,\n    ![](Python3-Django2-xadmin项目踩坑记录/django1-2.png)\n    NAME是MySQL中database的名字, USER是数据库用户名,PASSWORD是数据库密码,\n    - 安装mysqlclient, 在pycharm中安装或者使用相应的包管理器安装,\n    - 执行\n    ```\n    python manage.py makemigrations\n    python manage.py migrate\n    ```\n    迁移数据库.\n\n4. 为了防止项目结构混乱,在根目录下建一个Python Package,将四个文件全部拖如文件中 ![如图](Python3-Django2-xadmin项目踩坑记录/django1-1.png)\n 两个复选框全部取消勾选,移动完成后会有一些包导入时路径不对,将apps右键 --> Mark Directory as --> sources root ,此时在Pycharm中run这个项目不会出现问题,在命令行中运行会因为根目录不正确出现错误.\n ```\n(base)  alroy@Alan  ~/PycharmProjects/RBQ  python manage.py runserver        \nUnhandled exception in thread started by <function check_errors.<locals>.wrapper at 0x7f557788fd90>\nTraceback (most recent call last):\n  File \"/home/alroy/anaconda3/lib/python3.7/site-packages/django/utils/autoreload.py\", line 225, in wrapper\n    fn(*args, **kwargs)\n  File \"/home/alroy/anaconda3/lib/python3.7/site-packages/django/core/management/commands/runserver.py\", line 109, in inner_run\n    autoreload.raise_last_exception()\n  File \"/home/alroy/anaconda3/lib/python3.7/site-packages/django/utils/autoreload.py\", line 248, in raise_last_exception\n    raise _exception[1]\n  File \"/home/alroy/anaconda3/lib/python3.7/site-packages/django/core/management/__init__.py\", line 337, in execute\n    autoreload.check_errors(django.setup)()\n  File \"/home/alroy/anaconda3/lib/python3.7/site-packages/django/utils/autoreload.py\", line 225, in wrapper\n    fn(*args, **kwargs)\n  File \"/home/alroy/anaconda3/lib/python3.7/site-packages/django/__init__.py\", line 24, in setup\n    apps.populate(settings.INSTALLED_APPS)\n  File \"/home/alroy/anaconda3/lib/python3.7/site-packages/django/apps/registry.py\", line 89, in populate\n    app_config = AppConfig.create(entry)\n  File \"/home/alroy/anaconda3/lib/python3.7/site-packages/django/apps/config.py\", line 90, in create\n    module = import_module(entry)\n  File \"/home/alroy/anaconda3/lib/python3.7/importlib/__init__.py\", line 127, in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n  File \"<frozen importlib._bootstrap>\", line 1006, in _gcd_import\n  File \"<frozen importlib._bootstrap>\", line 983, in _find_and_load\n  File \"<frozen importlib._bootstrap>\", line 965, in _find_and_load_unlocked\nModuleNotFoundError: No module named 'users'\n\n ```\n\n在根目录的settings.py中添加两行代码\n```\nimport sys\nsys.path.insert(0,os.path.join(BASE_DIR, 'apps'))\n```\n`sys.path.insert(0,os.path.join(BASE_DIR, 'apps'))`定义搜索路径的优先顺序，序号从0开始，表示最大优先级，`sys.path.insert()`加入的也是临时搜索路径，程序退出后失效。\n\n## 安装xadmin\n\n1. xadmin的优点见[官网](http://sshwsfc.github.io/xadmin) \n\n\n这部分搞了半天,忘记去[Google](www.google.com)了,解决之后才发现自己很**,\n我安装方法是 直接`conda install -n django xadmin` 安装的是xadmin  0.6版本的,和Django2不兼容,运行会有各种神仙报错,就不贴截图了.\n2. xadmin的[Github](https://github.com/sshwsfc/xadmin)上给了Django2的安装方法,看到官网有安装方法,心中更是一万匹***奔腾而过,切换到对应的环境中\n`conda activate django`\n> pip install git+git://github.com/shwsfc/xadmin.git@django2\n\n## 配置用户上传media文件夹\n在settings.py中添加这两行代码将media文件夹添加到项目路\n径中,\n\n`MEDIA_URL = '/media/'`\n\n`MEDIA_ROOT = os.path.join(BASE_DIR, 'media')`\n\n在TEMPLATES部分的OPTIONS中加入\n`'django.template.context_processors.media',`\n即可在前端中使用((MEDIA_URL))('('替换成{)来访问用户上传的文件\n\n## 为每个app分配一个url\n\n在根目录的urls.py中设置url指向到organization下的urls\n文件,设置namespace为org,在organization下的urls中先\n声明 app_name='org'\n    \n    url(r'^org/', include('organization.urls',namespace='org')),\n\n将每个url设置name的好处,变更类名或者地址不需要修改前端页面的url配置(前端使用url方法`(%url 'org:test'%)`('('小括号替换为大括号))\n","slug":"Python3-Django2-xadmin项目踩坑记录","published":1,"updated":"2021-02-23T08:58:26.855Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckm4ekyoe0008esw4olrulf3t","content":"<h2 id=\"Models的相关问题\"><a href=\"#Models的相关问题\" class=\"headerlink\" title=\"Models的相关问题\"></a>Models的相关问题</h2><ol>\n<li><p>先执行命令创建四个app</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py startapp courses</span><br><span class=\"line\">python manage.py startapp users</span><br><span class=\"line\">python manage.py startapp operation</span><br><span class=\"line\">python manage.py startapp organization</span><br></pre></td></tr></table></figure>\n<p>修改settings.py中INSTALLED_APPS模块,注册四个app</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSTALLED_APPS = [</span><br><span class=\"line\">    &apos;django.contrib.admin&apos;,</span><br><span class=\"line\">    &apos;django.contrib.auth&apos;,</span><br><span class=\"line\">    &apos;django.contrib.contenttypes&apos;,</span><br><span class=\"line\">    &apos;django.contrib.sessions&apos;,</span><br><span class=\"line\">    &apos;django.contrib.messages&apos;,</span><br><span class=\"line\">    &apos;django.contrib.staticfiles&apos;,</span><br><span class=\"line\">    &apos;courses&apos;,</span><br><span class=\"line\">    &apos;operation&apos;,</span><br><span class=\"line\">    &apos;organization&apos;,</span><br><span class=\"line\">    &apos;users&apos;,</span><br><span class=\"line\">    &apos;xadmin&apos;,</span><br><span class=\"line\">    &apos;crispy_forms&apos;,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>创建UserProfile模型时,继承了AbstractUser类(<code>from django.contrib.auth.models import AbstractUser</code>)</p>\n</li>\n</ol>\n<p>使用此类时需要在settings.py中添加一行代码</p>\n<blockquote>\n<p>AUTH_USER_MODEL = ‘users.UserProfile’<br>users是app的名字,UserProfile是users中models.py中类的名称</p>\n</blockquote>\n<ol start=\"2\">\n<li><p>在models.py中定义类时,使用到外键,需要添加<code>on_delete=models.CASCADE</code> 来约束外键删除,</p>\n</li>\n<li><p>连接数据库:</p>\n<ul>\n<li>先修改settings.py中的配置,<br><img src=\"/2019/04/11/Python3-Django2-xadmin项目踩坑记录/django1-2.png\" alt><br>NAME是MySQL中database的名字, USER是数据库用户名,PASSWORD是数据库密码,</li>\n<li>安装mysqlclient, 在pycharm中安装或者使用相应的包管理器安装,</li>\n<li><p>执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py makemigrations</span><br><span class=\"line\">python manage.py migrate</span><br></pre></td></tr></table></figure>\n<p>迁移数据库.</p>\n</li>\n</ul>\n</li>\n<li><p>为了防止项目结构混乱,在根目录下建一个Python Package,将四个文件全部拖如文件中 <img src=\"/2019/04/11/Python3-Django2-xadmin项目踩坑记录/django1-1.png\" alt=\"如图\"><br>两个复选框全部取消勾选,移动完成后会有一些包导入时路径不对,将apps右键 –&gt; Mark Directory as –&gt; sources root ,此时在Pycharm中run这个项目不会出现问题,在命令行中运行会因为根目录不正确出现错误.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(base)  alroy@Alan  ~/PycharmProjects/RBQ  python manage.py runserver        </span><br><span class=\"line\">Unhandled exception in thread started by &lt;function check_errors.&lt;locals&gt;.wrapper at 0x7f557788fd90&gt;</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File &quot;/home/alroy/anaconda3/lib/python3.7/site-packages/django/utils/autoreload.py&quot;, line 225, in wrapper</span><br><span class=\"line\">    fn(*args, **kwargs)</span><br><span class=\"line\">  File &quot;/home/alroy/anaconda3/lib/python3.7/site-packages/django/core/management/commands/runserver.py&quot;, line 109, in inner_run</span><br><span class=\"line\">    autoreload.raise_last_exception()</span><br><span class=\"line\">  File &quot;/home/alroy/anaconda3/lib/python3.7/site-packages/django/utils/autoreload.py&quot;, line 248, in raise_last_exception</span><br><span class=\"line\">    raise _exception[1]</span><br><span class=\"line\">  File &quot;/home/alroy/anaconda3/lib/python3.7/site-packages/django/core/management/__init__.py&quot;, line 337, in execute</span><br><span class=\"line\">    autoreload.check_errors(django.setup)()</span><br><span class=\"line\">  File &quot;/home/alroy/anaconda3/lib/python3.7/site-packages/django/utils/autoreload.py&quot;, line 225, in wrapper</span><br><span class=\"line\">    fn(*args, **kwargs)</span><br><span class=\"line\">  File &quot;/home/alroy/anaconda3/lib/python3.7/site-packages/django/__init__.py&quot;, line 24, in setup</span><br><span class=\"line\">    apps.populate(settings.INSTALLED_APPS)</span><br><span class=\"line\">  File &quot;/home/alroy/anaconda3/lib/python3.7/site-packages/django/apps/registry.py&quot;, line 89, in populate</span><br><span class=\"line\">    app_config = AppConfig.create(entry)</span><br><span class=\"line\">  File &quot;/home/alroy/anaconda3/lib/python3.7/site-packages/django/apps/config.py&quot;, line 90, in create</span><br><span class=\"line\">    module = import_module(entry)</span><br><span class=\"line\">  File &quot;/home/alroy/anaconda3/lib/python3.7/importlib/__init__.py&quot;, line 127, in import_module</span><br><span class=\"line\">    return _bootstrap._gcd_import(name[level:], package, level)</span><br><span class=\"line\">  File &quot;&lt;frozen importlib._bootstrap&gt;&quot;, line 1006, in _gcd_import</span><br><span class=\"line\">  File &quot;&lt;frozen importlib._bootstrap&gt;&quot;, line 983, in _find_and_load</span><br><span class=\"line\">  File &quot;&lt;frozen importlib._bootstrap&gt;&quot;, line 965, in _find_and_load_unlocked</span><br><span class=\"line\">ModuleNotFoundError: No module named &apos;users&apos;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在根目录的settings.py中添加两行代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import sys</span><br><span class=\"line\">sys.path.insert(0,os.path.join(BASE_DIR, &apos;apps&apos;))</span><br></pre></td></tr></table></figure></p>\n<p><code>sys.path.insert(0,os.path.join(BASE_DIR, &#39;apps&#39;))</code>定义搜索路径的优先顺序，序号从0开始，表示最大优先级，<code>sys.path.insert()</code>加入的也是临时搜索路径，程序退出后失效。</p>\n<h2 id=\"安装xadmin\"><a href=\"#安装xadmin\" class=\"headerlink\" title=\"安装xadmin\"></a>安装xadmin</h2><ol>\n<li>xadmin的优点见<a href=\"http://sshwsfc.github.io/xadmin\" target=\"_blank\" rel=\"noopener\">官网</a> </li>\n</ol>\n<p>这部分搞了半天,忘记去<a href=\"www.google.com\">Google</a>了,解决之后才发现自己很**,<br>我安装方法是 直接<code>conda install -n django xadmin</code> 安装的是xadmin  0.6版本的,和Django2不兼容,运行会有各种神仙报错,就不贴截图了.</p>\n<ol start=\"2\">\n<li>xadmin的<a href=\"https://github.com/sshwsfc/xadmin\" target=\"_blank\" rel=\"noopener\">Github</a>上给了Django2的安装方法,看到官网有安装方法,心中更是一万匹***奔腾而过,切换到对应的环境中<br><code>conda activate django</code><blockquote>\n<p>pip install git+git://github.com/shwsfc/xadmin.git@django2</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"配置用户上传media文件夹\"><a href=\"#配置用户上传media文件夹\" class=\"headerlink\" title=\"配置用户上传media文件夹\"></a>配置用户上传media文件夹</h2><p>在settings.py中添加这两行代码将media文件夹添加到项目路<br>径中,</p>\n<p><code>MEDIA_URL = &#39;/media/&#39;</code></p>\n<p><code>MEDIA_ROOT = os.path.join(BASE_DIR, &#39;media&#39;)</code></p>\n<p>在TEMPLATES部分的OPTIONS中加入<br><code>&#39;django.template.context_processors.media&#39;,</code><br>即可在前端中使用((MEDIA_URL))(‘(‘替换成{)来访问用户上传的文件</p>\n<h2 id=\"为每个app分配一个url\"><a href=\"#为每个app分配一个url\" class=\"headerlink\" title=\"为每个app分配一个url\"></a>为每个app分配一个url</h2><p>在根目录的urls.py中设置url指向到organization下的urls<br>文件,设置namespace为org,在organization下的urls中先<br>声明 app_name=’org’</p>\n<pre><code>url(r&apos;^org/&apos;, include(&apos;organization.urls&apos;,namespace=&apos;org&apos;)),\n</code></pre><p>将每个url设置name的好处,变更类名或者地址不需要修改前端页面的url配置(前端使用url方法<code>(%url &#39;org:test&#39;%)</code>(‘(‘小括号替换为大括号))</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Models的相关问题\"><a href=\"#Models的相关问题\" class=\"headerlink\" title=\"Models的相关问题\"></a>Models的相关问题</h2><ol>\n<li><p>先执行命令创建四个app</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py startapp courses</span><br><span class=\"line\">python manage.py startapp users</span><br><span class=\"line\">python manage.py startapp operation</span><br><span class=\"line\">python manage.py startapp organization</span><br></pre></td></tr></table></figure>\n<p>修改settings.py中INSTALLED_APPS模块,注册四个app</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSTALLED_APPS = [</span><br><span class=\"line\">    &apos;django.contrib.admin&apos;,</span><br><span class=\"line\">    &apos;django.contrib.auth&apos;,</span><br><span class=\"line\">    &apos;django.contrib.contenttypes&apos;,</span><br><span class=\"line\">    &apos;django.contrib.sessions&apos;,</span><br><span class=\"line\">    &apos;django.contrib.messages&apos;,</span><br><span class=\"line\">    &apos;django.contrib.staticfiles&apos;,</span><br><span class=\"line\">    &apos;courses&apos;,</span><br><span class=\"line\">    &apos;operation&apos;,</span><br><span class=\"line\">    &apos;organization&apos;,</span><br><span class=\"line\">    &apos;users&apos;,</span><br><span class=\"line\">    &apos;xadmin&apos;,</span><br><span class=\"line\">    &apos;crispy_forms&apos;,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>创建UserProfile模型时,继承了AbstractUser类(<code>from django.contrib.auth.models import AbstractUser</code>)</p>\n</li>\n</ol>\n<p>使用此类时需要在settings.py中添加一行代码</p>\n<blockquote>\n<p>AUTH_USER_MODEL = ‘users.UserProfile’<br>users是app的名字,UserProfile是users中models.py中类的名称</p>\n</blockquote>\n<ol start=\"2\">\n<li><p>在models.py中定义类时,使用到外键,需要添加<code>on_delete=models.CASCADE</code> 来约束外键删除,</p>\n</li>\n<li><p>连接数据库:</p>\n<ul>\n<li>先修改settings.py中的配置,<br><img src=\"/2019/04/11/Python3-Django2-xadmin项目踩坑记录/django1-2.png\" alt><br>NAME是MySQL中database的名字, USER是数据库用户名,PASSWORD是数据库密码,</li>\n<li>安装mysqlclient, 在pycharm中安装或者使用相应的包管理器安装,</li>\n<li><p>执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py makemigrations</span><br><span class=\"line\">python manage.py migrate</span><br></pre></td></tr></table></figure>\n<p>迁移数据库.</p>\n</li>\n</ul>\n</li>\n<li><p>为了防止项目结构混乱,在根目录下建一个Python Package,将四个文件全部拖如文件中 <img src=\"/2019/04/11/Python3-Django2-xadmin项目踩坑记录/django1-1.png\" alt=\"如图\"><br>两个复选框全部取消勾选,移动完成后会有一些包导入时路径不对,将apps右键 –&gt; Mark Directory as –&gt; sources root ,此时在Pycharm中run这个项目不会出现问题,在命令行中运行会因为根目录不正确出现错误.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(base)  alroy@Alan  ~/PycharmProjects/RBQ  python manage.py runserver        </span><br><span class=\"line\">Unhandled exception in thread started by &lt;function check_errors.&lt;locals&gt;.wrapper at 0x7f557788fd90&gt;</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File &quot;/home/alroy/anaconda3/lib/python3.7/site-packages/django/utils/autoreload.py&quot;, line 225, in wrapper</span><br><span class=\"line\">    fn(*args, **kwargs)</span><br><span class=\"line\">  File &quot;/home/alroy/anaconda3/lib/python3.7/site-packages/django/core/management/commands/runserver.py&quot;, line 109, in inner_run</span><br><span class=\"line\">    autoreload.raise_last_exception()</span><br><span class=\"line\">  File &quot;/home/alroy/anaconda3/lib/python3.7/site-packages/django/utils/autoreload.py&quot;, line 248, in raise_last_exception</span><br><span class=\"line\">    raise _exception[1]</span><br><span class=\"line\">  File &quot;/home/alroy/anaconda3/lib/python3.7/site-packages/django/core/management/__init__.py&quot;, line 337, in execute</span><br><span class=\"line\">    autoreload.check_errors(django.setup)()</span><br><span class=\"line\">  File &quot;/home/alroy/anaconda3/lib/python3.7/site-packages/django/utils/autoreload.py&quot;, line 225, in wrapper</span><br><span class=\"line\">    fn(*args, **kwargs)</span><br><span class=\"line\">  File &quot;/home/alroy/anaconda3/lib/python3.7/site-packages/django/__init__.py&quot;, line 24, in setup</span><br><span class=\"line\">    apps.populate(settings.INSTALLED_APPS)</span><br><span class=\"line\">  File &quot;/home/alroy/anaconda3/lib/python3.7/site-packages/django/apps/registry.py&quot;, line 89, in populate</span><br><span class=\"line\">    app_config = AppConfig.create(entry)</span><br><span class=\"line\">  File &quot;/home/alroy/anaconda3/lib/python3.7/site-packages/django/apps/config.py&quot;, line 90, in create</span><br><span class=\"line\">    module = import_module(entry)</span><br><span class=\"line\">  File &quot;/home/alroy/anaconda3/lib/python3.7/importlib/__init__.py&quot;, line 127, in import_module</span><br><span class=\"line\">    return _bootstrap._gcd_import(name[level:], package, level)</span><br><span class=\"line\">  File &quot;&lt;frozen importlib._bootstrap&gt;&quot;, line 1006, in _gcd_import</span><br><span class=\"line\">  File &quot;&lt;frozen importlib._bootstrap&gt;&quot;, line 983, in _find_and_load</span><br><span class=\"line\">  File &quot;&lt;frozen importlib._bootstrap&gt;&quot;, line 965, in _find_and_load_unlocked</span><br><span class=\"line\">ModuleNotFoundError: No module named &apos;users&apos;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在根目录的settings.py中添加两行代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import sys</span><br><span class=\"line\">sys.path.insert(0,os.path.join(BASE_DIR, &apos;apps&apos;))</span><br></pre></td></tr></table></figure></p>\n<p><code>sys.path.insert(0,os.path.join(BASE_DIR, &#39;apps&#39;))</code>定义搜索路径的优先顺序，序号从0开始，表示最大优先级，<code>sys.path.insert()</code>加入的也是临时搜索路径，程序退出后失效。</p>\n<h2 id=\"安装xadmin\"><a href=\"#安装xadmin\" class=\"headerlink\" title=\"安装xadmin\"></a>安装xadmin</h2><ol>\n<li>xadmin的优点见<a href=\"http://sshwsfc.github.io/xadmin\" target=\"_blank\" rel=\"noopener\">官网</a> </li>\n</ol>\n<p>这部分搞了半天,忘记去<a href=\"www.google.com\">Google</a>了,解决之后才发现自己很**,<br>我安装方法是 直接<code>conda install -n django xadmin</code> 安装的是xadmin  0.6版本的,和Django2不兼容,运行会有各种神仙报错,就不贴截图了.</p>\n<ol start=\"2\">\n<li>xadmin的<a href=\"https://github.com/sshwsfc/xadmin\" target=\"_blank\" rel=\"noopener\">Github</a>上给了Django2的安装方法,看到官网有安装方法,心中更是一万匹***奔腾而过,切换到对应的环境中<br><code>conda activate django</code><blockquote>\n<p>pip install git+git://github.com/shwsfc/xadmin.git@django2</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"配置用户上传media文件夹\"><a href=\"#配置用户上传media文件夹\" class=\"headerlink\" title=\"配置用户上传media文件夹\"></a>配置用户上传media文件夹</h2><p>在settings.py中添加这两行代码将media文件夹添加到项目路<br>径中,</p>\n<p><code>MEDIA_URL = &#39;/media/&#39;</code></p>\n<p><code>MEDIA_ROOT = os.path.join(BASE_DIR, &#39;media&#39;)</code></p>\n<p>在TEMPLATES部分的OPTIONS中加入<br><code>&#39;django.template.context_processors.media&#39;,</code><br>即可在前端中使用((MEDIA_URL))(‘(‘替换成{)来访问用户上传的文件</p>\n<h2 id=\"为每个app分配一个url\"><a href=\"#为每个app分配一个url\" class=\"headerlink\" title=\"为每个app分配一个url\"></a>为每个app分配一个url</h2><p>在根目录的urls.py中设置url指向到organization下的urls<br>文件,设置namespace为org,在organization下的urls中先<br>声明 app_name=’org’</p>\n<pre><code>url(r&apos;^org/&apos;, include(&apos;organization.urls&apos;,namespace=&apos;org&apos;)),\n</code></pre><p>将每个url设置name的好处,变更类名或者地址不需要修改前端页面的url配置(前端使用url方法<code>(%url &#39;org:test&#39;%)</code>(‘(‘小括号替换为大括号))</p>\n"},{"title":"Python实现BFS和DFS","date":"2019-04-06T04:35:51.000Z","_content":"\n# 前言\n> 广度优先搜索算法（英语：Breadth-First-Search，缩写为BFS），又译作宽度优先搜索，或横向优先搜索，是一种图形搜索算法。简单的说，BFS是从根节点开始，沿着树的宽度遍历树的节点。如果所有节点均被访问，则算法中止。\n\n\n> 深度优先搜索算法（英语：Depth-First-Search，DFS）是一种用于遍历或搜索树或图的算法。沿着树的深度遍历树的节点，尽可能深的搜索树的分支。当节点v的所在边都己被探寻过，搜索将回溯到发现节点v的那条边的起始节点。这一过程一直进行到已发现从源节点可达的所有节点为止。如果还存在未被发现的节点，则选择其中一个作为源节点并重复以上过程，整个进程反复进行直到所有节点都被访问为止。属于盲目搜索。深度优先搜索是图论中的经典算法，利用深度优先搜索算法可以产生目标图的相应拓扑排序表，利用拓扑排序表可以方便的解决很多相关的图论问题，如最大路径问题等等\n## 原理\n\n### 广度优先搜索\n1. 首先将根节点放入队列\n2. 从队列中取出第一个节点,并检验它是否为目标.\n    * 如果找到目标,则结束搜索并回传结果\n    * 否则将它所有尚未检验过的直接子节点加入队列中.\n3. 若队列为空,表示整张图都检查过了--亦即图中没有欲搜索的目标.结束搜索并回传“找不到目标”。\n4. 重复步骤2.\n5. 需要使用队列这一数据结构\n\n\n\n\n![图1-1](Python实现BFS-DFS/BFS.png)\n假设以A为起点,与A点直接相连的点是 B,C ,此时广度优先遍历序列为A,B,C, 将BC入队,此时与B节点直接相连的是C和D,C已经在Queue中,所以下一个节点应是D,此时队列中为ABCD.与C节点相连的且未遍历过的节点为E, 所以将E入队,此时未遍历的节点为D,E, 与D直接相连的节点F入队即可得到广度优先遍历ABCDEF.\n\n\n### 深度优先搜索\n1. 首先将根节点放入队列中。\n2. 从队列中取出第一个节点，并检验它是否为目标。   \n    - 如果找到目标，则结束搜寻并回传结果。\n    - 否则将它某一个尚未检验过的直接子节点加入队列中。\n3. 重复步骤2。\n4. 如果不存在未检测过的直接子节点。\n    + 将上一级节点加入队列中。\n    + 重复步骤2。\n5. 重复步骤4。\n6. 若队列为空，表示整张图都检查过了——亦即图中没有欲搜寻的目标。结束搜寻并回传“找不到目标”。\n7. 需要使用栈这一数据结构\n\n\n\n![图1-1](Python实现BFS-DFS/BFS.png)\n深度优先搜索过程:\n\n深度优先搜索类似于树的先序遍历,正如其名称, 这种搜索算法所\n遵循的搜索策略是尽可能\"深\"地搜索一个图, 它的基本思想:\n\n假设以A为起点,然后由A出发,访问与A邻接且未被访问的任一顶\n点B,再访问与B邻接且未被访问的顶点C,再访问与C邻接且未被访\n问的顶点E......重复上述过程.当不能再继续向下访问时,依次\n退回到最近被访问的顶点,若它还有邻接顶点未被访问过,则从该\n点开始继续上述搜索过程,直到图中所有顶点均被访问过为止.一\n般情况下,一个图的BFS和DFS不唯一.\n\n# Python实现\n\n## BFS\n\n```\ngraph = {\n    \"A\":[\"B\", \"C\"],   # 与A相连的节点是B,C \n    \"B\":[\"A\", \"C\", \"D\"], # 与B相连的节点是A,C,D\n    \"C\":[\"A\", \"B\", \"D\", \"E\"],\n    \"D\":[\"B\", \"C\", \"E\", \"F\"],\n    \"E\":[\"C\", \"D\"],\n    \"F\":[\"D\"]\n }\n\ndef BFS(graph, s):\n    queue = []  # 初始化一个空队列\n    queue.append(s) # 将所有节点入队列\n    seen = set()\n    seen.add(s)\n    parent = {s : None}\n\n    while(len(queue) > 0):\n        vertex = queue.pop(0)\n        nodes = graph[vertex]\n        for w in nodes:\n            if w not in seen:\n                queue.append(w)\n                seen.add(w)\n                parent[w] = vertex\n        print(vertex)\n    return parent\n\n\nparent = BFS(graph, \"E\")\nfor key in parent:\n    print(key, parent[key])\n\n```\n\n## DFS\n\n```\ngraph = {\n    \"A\":[\"B\", \"C\"],\n    \"B\":[\"A\", \"C\", \"D\"],\n    \"C\":[\"A\", \"B\", \"D\", \"E\"],\n    \"D\":[\"B\", \"C\", \"E\", \"F\"],\n    \"E\":[\"C\", \"D\"],\n    \"F\":[\"D\"]\n }\n\ndef DFS(graph, s):\n    stack = []\n    stack.append(s)\n    seen = set()\n    seen.add(s)\n    while(len(stack) > 0):\n        vertex = stack.pop()\n        nodes = graph[vertex]\n        for w in nodes:\n            if w not in seen:\n                stack.append(w)\n                seen.add(w)\n        print(vertex)\n\nDFS(graph, \"A\")\n\n```\n","source":"_posts/Python实现BFS-DFS.md","raw":"---\ntitle: Python实现BFS和DFS\ndate: 2019-04-06 12:35:51\ntags: [Python, BFS, DFS,]\ncategories: [Python,算法]\n---\n\n# 前言\n> 广度优先搜索算法（英语：Breadth-First-Search，缩写为BFS），又译作宽度优先搜索，或横向优先搜索，是一种图形搜索算法。简单的说，BFS是从根节点开始，沿着树的宽度遍历树的节点。如果所有节点均被访问，则算法中止。\n\n\n> 深度优先搜索算法（英语：Depth-First-Search，DFS）是一种用于遍历或搜索树或图的算法。沿着树的深度遍历树的节点，尽可能深的搜索树的分支。当节点v的所在边都己被探寻过，搜索将回溯到发现节点v的那条边的起始节点。这一过程一直进行到已发现从源节点可达的所有节点为止。如果还存在未被发现的节点，则选择其中一个作为源节点并重复以上过程，整个进程反复进行直到所有节点都被访问为止。属于盲目搜索。深度优先搜索是图论中的经典算法，利用深度优先搜索算法可以产生目标图的相应拓扑排序表，利用拓扑排序表可以方便的解决很多相关的图论问题，如最大路径问题等等\n## 原理\n\n### 广度优先搜索\n1. 首先将根节点放入队列\n2. 从队列中取出第一个节点,并检验它是否为目标.\n    * 如果找到目标,则结束搜索并回传结果\n    * 否则将它所有尚未检验过的直接子节点加入队列中.\n3. 若队列为空,表示整张图都检查过了--亦即图中没有欲搜索的目标.结束搜索并回传“找不到目标”。\n4. 重复步骤2.\n5. 需要使用队列这一数据结构\n\n\n\n\n![图1-1](Python实现BFS-DFS/BFS.png)\n假设以A为起点,与A点直接相连的点是 B,C ,此时广度优先遍历序列为A,B,C, 将BC入队,此时与B节点直接相连的是C和D,C已经在Queue中,所以下一个节点应是D,此时队列中为ABCD.与C节点相连的且未遍历过的节点为E, 所以将E入队,此时未遍历的节点为D,E, 与D直接相连的节点F入队即可得到广度优先遍历ABCDEF.\n\n\n### 深度优先搜索\n1. 首先将根节点放入队列中。\n2. 从队列中取出第一个节点，并检验它是否为目标。   \n    - 如果找到目标，则结束搜寻并回传结果。\n    - 否则将它某一个尚未检验过的直接子节点加入队列中。\n3. 重复步骤2。\n4. 如果不存在未检测过的直接子节点。\n    + 将上一级节点加入队列中。\n    + 重复步骤2。\n5. 重复步骤4。\n6. 若队列为空，表示整张图都检查过了——亦即图中没有欲搜寻的目标。结束搜寻并回传“找不到目标”。\n7. 需要使用栈这一数据结构\n\n\n\n![图1-1](Python实现BFS-DFS/BFS.png)\n深度优先搜索过程:\n\n深度优先搜索类似于树的先序遍历,正如其名称, 这种搜索算法所\n遵循的搜索策略是尽可能\"深\"地搜索一个图, 它的基本思想:\n\n假设以A为起点,然后由A出发,访问与A邻接且未被访问的任一顶\n点B,再访问与B邻接且未被访问的顶点C,再访问与C邻接且未被访\n问的顶点E......重复上述过程.当不能再继续向下访问时,依次\n退回到最近被访问的顶点,若它还有邻接顶点未被访问过,则从该\n点开始继续上述搜索过程,直到图中所有顶点均被访问过为止.一\n般情况下,一个图的BFS和DFS不唯一.\n\n# Python实现\n\n## BFS\n\n```\ngraph = {\n    \"A\":[\"B\", \"C\"],   # 与A相连的节点是B,C \n    \"B\":[\"A\", \"C\", \"D\"], # 与B相连的节点是A,C,D\n    \"C\":[\"A\", \"B\", \"D\", \"E\"],\n    \"D\":[\"B\", \"C\", \"E\", \"F\"],\n    \"E\":[\"C\", \"D\"],\n    \"F\":[\"D\"]\n }\n\ndef BFS(graph, s):\n    queue = []  # 初始化一个空队列\n    queue.append(s) # 将所有节点入队列\n    seen = set()\n    seen.add(s)\n    parent = {s : None}\n\n    while(len(queue) > 0):\n        vertex = queue.pop(0)\n        nodes = graph[vertex]\n        for w in nodes:\n            if w not in seen:\n                queue.append(w)\n                seen.add(w)\n                parent[w] = vertex\n        print(vertex)\n    return parent\n\n\nparent = BFS(graph, \"E\")\nfor key in parent:\n    print(key, parent[key])\n\n```\n\n## DFS\n\n```\ngraph = {\n    \"A\":[\"B\", \"C\"],\n    \"B\":[\"A\", \"C\", \"D\"],\n    \"C\":[\"A\", \"B\", \"D\", \"E\"],\n    \"D\":[\"B\", \"C\", \"E\", \"F\"],\n    \"E\":[\"C\", \"D\"],\n    \"F\":[\"D\"]\n }\n\ndef DFS(graph, s):\n    stack = []\n    stack.append(s)\n    seen = set()\n    seen.add(s)\n    while(len(stack) > 0):\n        vertex = stack.pop()\n        nodes = graph[vertex]\n        for w in nodes:\n            if w not in seen:\n                stack.append(w)\n                seen.add(w)\n        print(vertex)\n\nDFS(graph, \"A\")\n\n```\n","slug":"Python实现BFS-DFS","published":1,"updated":"2021-02-23T08:58:26.860Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckm4ekyoh0009esw4kfnw8n1i","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>广度优先搜索算法（英语：Breadth-First-Search，缩写为BFS），又译作宽度优先搜索，或横向优先搜索，是一种图形搜索算法。简单的说，BFS是从根节点开始，沿着树的宽度遍历树的节点。如果所有节点均被访问，则算法中止。</p>\n</blockquote>\n<blockquote>\n<p>深度优先搜索算法（英语：Depth-First-Search，DFS）是一种用于遍历或搜索树或图的算法。沿着树的深度遍历树的节点，尽可能深的搜索树的分支。当节点v的所在边都己被探寻过，搜索将回溯到发现节点v的那条边的起始节点。这一过程一直进行到已发现从源节点可达的所有节点为止。如果还存在未被发现的节点，则选择其中一个作为源节点并重复以上过程，整个进程反复进行直到所有节点都被访问为止。属于盲目搜索。深度优先搜索是图论中的经典算法，利用深度优先搜索算法可以产生目标图的相应拓扑排序表，利用拓扑排序表可以方便的解决很多相关的图论问题，如最大路径问题等等</p>\n</blockquote>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><h3 id=\"广度优先搜索\"><a href=\"#广度优先搜索\" class=\"headerlink\" title=\"广度优先搜索\"></a>广度优先搜索</h3><ol>\n<li>首先将根节点放入队列</li>\n<li>从队列中取出第一个节点,并检验它是否为目标.<ul>\n<li>如果找到目标,则结束搜索并回传结果</li>\n<li>否则将它所有尚未检验过的直接子节点加入队列中.</li>\n</ul>\n</li>\n<li>若队列为空,表示整张图都检查过了–亦即图中没有欲搜索的目标.结束搜索并回传“找不到目标”。</li>\n<li>重复步骤2.</li>\n<li>需要使用队列这一数据结构</li>\n</ol>\n<p><img src=\"/2019/04/06/Python实现BFS-DFS/BFS.png\" alt=\"图1-1\"><br>假设以A为起点,与A点直接相连的点是 B,C ,此时广度优先遍历序列为A,B,C, 将BC入队,此时与B节点直接相连的是C和D,C已经在Queue中,所以下一个节点应是D,此时队列中为ABCD.与C节点相连的且未遍历过的节点为E, 所以将E入队,此时未遍历的节点为D,E, 与D直接相连的节点F入队即可得到广度优先遍历ABCDEF.</p>\n<h3 id=\"深度优先搜索\"><a href=\"#深度优先搜索\" class=\"headerlink\" title=\"深度优先搜索\"></a>深度优先搜索</h3><ol>\n<li>首先将根节点放入队列中。</li>\n<li>从队列中取出第一个节点，并检验它是否为目标。   <ul>\n<li>如果找到目标，则结束搜寻并回传结果。</li>\n<li>否则将它某一个尚未检验过的直接子节点加入队列中。</li>\n</ul>\n</li>\n<li>重复步骤2。</li>\n<li>如果不存在未检测过的直接子节点。<ul>\n<li>将上一级节点加入队列中。</li>\n<li>重复步骤2。</li>\n</ul>\n</li>\n<li>重复步骤4。</li>\n<li>若队列为空，表示整张图都检查过了——亦即图中没有欲搜寻的目标。结束搜寻并回传“找不到目标”。</li>\n<li>需要使用栈这一数据结构</li>\n</ol>\n<p><img src=\"/2019/04/06/Python实现BFS-DFS/BFS.png\" alt=\"图1-1\"><br>深度优先搜索过程:</p>\n<p>深度优先搜索类似于树的先序遍历,正如其名称, 这种搜索算法所<br>遵循的搜索策略是尽可能”深”地搜索一个图, 它的基本思想:</p>\n<p>假设以A为起点,然后由A出发,访问与A邻接且未被访问的任一顶<br>点B,再访问与B邻接且未被访问的顶点C,再访问与C邻接且未被访<br>问的顶点E……重复上述过程.当不能再继续向下访问时,依次<br>退回到最近被访问的顶点,若它还有邻接顶点未被访问过,则从该<br>点开始继续上述搜索过程,直到图中所有顶点均被访问过为止.一<br>般情况下,一个图的BFS和DFS不唯一.</p>\n<h1 id=\"Python实现\"><a href=\"#Python实现\" class=\"headerlink\" title=\"Python实现\"></a>Python实现</h1><h2 id=\"BFS\"><a href=\"#BFS\" class=\"headerlink\" title=\"BFS\"></a>BFS</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph = &#123;</span><br><span class=\"line\">    &quot;A&quot;:[&quot;B&quot;, &quot;C&quot;],   # 与A相连的节点是B,C </span><br><span class=\"line\">    &quot;B&quot;:[&quot;A&quot;, &quot;C&quot;, &quot;D&quot;], # 与B相连的节点是A,C,D</span><br><span class=\"line\">    &quot;C&quot;:[&quot;A&quot;, &quot;B&quot;, &quot;D&quot;, &quot;E&quot;],</span><br><span class=\"line\">    &quot;D&quot;:[&quot;B&quot;, &quot;C&quot;, &quot;E&quot;, &quot;F&quot;],</span><br><span class=\"line\">    &quot;E&quot;:[&quot;C&quot;, &quot;D&quot;],</span><br><span class=\"line\">    &quot;F&quot;:[&quot;D&quot;]</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">def BFS(graph, s):</span><br><span class=\"line\">    queue = []  # 初始化一个空队列</span><br><span class=\"line\">    queue.append(s) # 将所有节点入队列</span><br><span class=\"line\">    seen = set()</span><br><span class=\"line\">    seen.add(s)</span><br><span class=\"line\">    parent = &#123;s : None&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    while(len(queue) &gt; 0):</span><br><span class=\"line\">        vertex = queue.pop(0)</span><br><span class=\"line\">        nodes = graph[vertex]</span><br><span class=\"line\">        for w in nodes:</span><br><span class=\"line\">            if w not in seen:</span><br><span class=\"line\">                queue.append(w)</span><br><span class=\"line\">                seen.add(w)</span><br><span class=\"line\">                parent[w] = vertex</span><br><span class=\"line\">        print(vertex)</span><br><span class=\"line\">    return parent</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">parent = BFS(graph, &quot;E&quot;)</span><br><span class=\"line\">for key in parent:</span><br><span class=\"line\">    print(key, parent[key])</span><br></pre></td></tr></table></figure>\n<h2 id=\"DFS\"><a href=\"#DFS\" class=\"headerlink\" title=\"DFS\"></a>DFS</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph = &#123;</span><br><span class=\"line\">    &quot;A&quot;:[&quot;B&quot;, &quot;C&quot;],</span><br><span class=\"line\">    &quot;B&quot;:[&quot;A&quot;, &quot;C&quot;, &quot;D&quot;],</span><br><span class=\"line\">    &quot;C&quot;:[&quot;A&quot;, &quot;B&quot;, &quot;D&quot;, &quot;E&quot;],</span><br><span class=\"line\">    &quot;D&quot;:[&quot;B&quot;, &quot;C&quot;, &quot;E&quot;, &quot;F&quot;],</span><br><span class=\"line\">    &quot;E&quot;:[&quot;C&quot;, &quot;D&quot;],</span><br><span class=\"line\">    &quot;F&quot;:[&quot;D&quot;]</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">def DFS(graph, s):</span><br><span class=\"line\">    stack = []</span><br><span class=\"line\">    stack.append(s)</span><br><span class=\"line\">    seen = set()</span><br><span class=\"line\">    seen.add(s)</span><br><span class=\"line\">    while(len(stack) &gt; 0):</span><br><span class=\"line\">        vertex = stack.pop()</span><br><span class=\"line\">        nodes = graph[vertex]</span><br><span class=\"line\">        for w in nodes:</span><br><span class=\"line\">            if w not in seen:</span><br><span class=\"line\">                stack.append(w)</span><br><span class=\"line\">                seen.add(w)</span><br><span class=\"line\">        print(vertex)</span><br><span class=\"line\"></span><br><span class=\"line\">DFS(graph, &quot;A&quot;)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>广度优先搜索算法（英语：Breadth-First-Search，缩写为BFS），又译作宽度优先搜索，或横向优先搜索，是一种图形搜索算法。简单的说，BFS是从根节点开始，沿着树的宽度遍历树的节点。如果所有节点均被访问，则算法中止。</p>\n</blockquote>\n<blockquote>\n<p>深度优先搜索算法（英语：Depth-First-Search，DFS）是一种用于遍历或搜索树或图的算法。沿着树的深度遍历树的节点，尽可能深的搜索树的分支。当节点v的所在边都己被探寻过，搜索将回溯到发现节点v的那条边的起始节点。这一过程一直进行到已发现从源节点可达的所有节点为止。如果还存在未被发现的节点，则选择其中一个作为源节点并重复以上过程，整个进程反复进行直到所有节点都被访问为止。属于盲目搜索。深度优先搜索是图论中的经典算法，利用深度优先搜索算法可以产生目标图的相应拓扑排序表，利用拓扑排序表可以方便的解决很多相关的图论问题，如最大路径问题等等</p>\n</blockquote>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><h3 id=\"广度优先搜索\"><a href=\"#广度优先搜索\" class=\"headerlink\" title=\"广度优先搜索\"></a>广度优先搜索</h3><ol>\n<li>首先将根节点放入队列</li>\n<li>从队列中取出第一个节点,并检验它是否为目标.<ul>\n<li>如果找到目标,则结束搜索并回传结果</li>\n<li>否则将它所有尚未检验过的直接子节点加入队列中.</li>\n</ul>\n</li>\n<li>若队列为空,表示整张图都检查过了–亦即图中没有欲搜索的目标.结束搜索并回传“找不到目标”。</li>\n<li>重复步骤2.</li>\n<li>需要使用队列这一数据结构</li>\n</ol>\n<p><img src=\"/2019/04/06/Python实现BFS-DFS/BFS.png\" alt=\"图1-1\"><br>假设以A为起点,与A点直接相连的点是 B,C ,此时广度优先遍历序列为A,B,C, 将BC入队,此时与B节点直接相连的是C和D,C已经在Queue中,所以下一个节点应是D,此时队列中为ABCD.与C节点相连的且未遍历过的节点为E, 所以将E入队,此时未遍历的节点为D,E, 与D直接相连的节点F入队即可得到广度优先遍历ABCDEF.</p>\n<h3 id=\"深度优先搜索\"><a href=\"#深度优先搜索\" class=\"headerlink\" title=\"深度优先搜索\"></a>深度优先搜索</h3><ol>\n<li>首先将根节点放入队列中。</li>\n<li>从队列中取出第一个节点，并检验它是否为目标。   <ul>\n<li>如果找到目标，则结束搜寻并回传结果。</li>\n<li>否则将它某一个尚未检验过的直接子节点加入队列中。</li>\n</ul>\n</li>\n<li>重复步骤2。</li>\n<li>如果不存在未检测过的直接子节点。<ul>\n<li>将上一级节点加入队列中。</li>\n<li>重复步骤2。</li>\n</ul>\n</li>\n<li>重复步骤4。</li>\n<li>若队列为空，表示整张图都检查过了——亦即图中没有欲搜寻的目标。结束搜寻并回传“找不到目标”。</li>\n<li>需要使用栈这一数据结构</li>\n</ol>\n<p><img src=\"/2019/04/06/Python实现BFS-DFS/BFS.png\" alt=\"图1-1\"><br>深度优先搜索过程:</p>\n<p>深度优先搜索类似于树的先序遍历,正如其名称, 这种搜索算法所<br>遵循的搜索策略是尽可能”深”地搜索一个图, 它的基本思想:</p>\n<p>假设以A为起点,然后由A出发,访问与A邻接且未被访问的任一顶<br>点B,再访问与B邻接且未被访问的顶点C,再访问与C邻接且未被访<br>问的顶点E……重复上述过程.当不能再继续向下访问时,依次<br>退回到最近被访问的顶点,若它还有邻接顶点未被访问过,则从该<br>点开始继续上述搜索过程,直到图中所有顶点均被访问过为止.一<br>般情况下,一个图的BFS和DFS不唯一.</p>\n<h1 id=\"Python实现\"><a href=\"#Python实现\" class=\"headerlink\" title=\"Python实现\"></a>Python实现</h1><h2 id=\"BFS\"><a href=\"#BFS\" class=\"headerlink\" title=\"BFS\"></a>BFS</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph = &#123;</span><br><span class=\"line\">    &quot;A&quot;:[&quot;B&quot;, &quot;C&quot;],   # 与A相连的节点是B,C </span><br><span class=\"line\">    &quot;B&quot;:[&quot;A&quot;, &quot;C&quot;, &quot;D&quot;], # 与B相连的节点是A,C,D</span><br><span class=\"line\">    &quot;C&quot;:[&quot;A&quot;, &quot;B&quot;, &quot;D&quot;, &quot;E&quot;],</span><br><span class=\"line\">    &quot;D&quot;:[&quot;B&quot;, &quot;C&quot;, &quot;E&quot;, &quot;F&quot;],</span><br><span class=\"line\">    &quot;E&quot;:[&quot;C&quot;, &quot;D&quot;],</span><br><span class=\"line\">    &quot;F&quot;:[&quot;D&quot;]</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">def BFS(graph, s):</span><br><span class=\"line\">    queue = []  # 初始化一个空队列</span><br><span class=\"line\">    queue.append(s) # 将所有节点入队列</span><br><span class=\"line\">    seen = set()</span><br><span class=\"line\">    seen.add(s)</span><br><span class=\"line\">    parent = &#123;s : None&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    while(len(queue) &gt; 0):</span><br><span class=\"line\">        vertex = queue.pop(0)</span><br><span class=\"line\">        nodes = graph[vertex]</span><br><span class=\"line\">        for w in nodes:</span><br><span class=\"line\">            if w not in seen:</span><br><span class=\"line\">                queue.append(w)</span><br><span class=\"line\">                seen.add(w)</span><br><span class=\"line\">                parent[w] = vertex</span><br><span class=\"line\">        print(vertex)</span><br><span class=\"line\">    return parent</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">parent = BFS(graph, &quot;E&quot;)</span><br><span class=\"line\">for key in parent:</span><br><span class=\"line\">    print(key, parent[key])</span><br></pre></td></tr></table></figure>\n<h2 id=\"DFS\"><a href=\"#DFS\" class=\"headerlink\" title=\"DFS\"></a>DFS</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph = &#123;</span><br><span class=\"line\">    &quot;A&quot;:[&quot;B&quot;, &quot;C&quot;],</span><br><span class=\"line\">    &quot;B&quot;:[&quot;A&quot;, &quot;C&quot;, &quot;D&quot;],</span><br><span class=\"line\">    &quot;C&quot;:[&quot;A&quot;, &quot;B&quot;, &quot;D&quot;, &quot;E&quot;],</span><br><span class=\"line\">    &quot;D&quot;:[&quot;B&quot;, &quot;C&quot;, &quot;E&quot;, &quot;F&quot;],</span><br><span class=\"line\">    &quot;E&quot;:[&quot;C&quot;, &quot;D&quot;],</span><br><span class=\"line\">    &quot;F&quot;:[&quot;D&quot;]</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">def DFS(graph, s):</span><br><span class=\"line\">    stack = []</span><br><span class=\"line\">    stack.append(s)</span><br><span class=\"line\">    seen = set()</span><br><span class=\"line\">    seen.add(s)</span><br><span class=\"line\">    while(len(stack) &gt; 0):</span><br><span class=\"line\">        vertex = stack.pop()</span><br><span class=\"line\">        nodes = graph[vertex]</span><br><span class=\"line\">        for w in nodes:</span><br><span class=\"line\">            if w not in seen:</span><br><span class=\"line\">                stack.append(w)</span><br><span class=\"line\">                seen.add(w)</span><br><span class=\"line\">        print(vertex)</span><br><span class=\"line\"></span><br><span class=\"line\">DFS(graph, &quot;A&quot;)</span><br></pre></td></tr></table></figure>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2021-02-23T08:58:26.862Z","updated":"2021-02-23T08:58:26.862Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckm4ekyoj000aesw4zl14qvpr","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"海子逝世三十周年","date":"2019-03-26T11:05:36.000Z","_content":"\n那是整整三十年前的今天。\n\n黄昏，海子悄无声息地去了山海关，口袋里只有单程车票，没有酒钱。那是北方的早春，天气还没有暖和起来，小酒馆门口挂着厚厚的门帘，街角的玉兰树上光秃秃的，花苞还没有长出来。\n\n海子对酒馆老板说：“我给大家朗读我的诗，你能不能给我酒喝？”老板回答：“我可以给你酒喝，但你别在这儿朗诵。”周围的人笑起来，海子悻悻走开，再也没有回来。\n\n他找到一处无人的铁轨，躺好，平静地等待火车的到来，就像在等待一首优美的诗歌。那悲壮惨烈的一幕和那首《太阳》中的意境几乎一模一样：\n```\n正是黄昏时分\n无头英雄手指落日\n手指日落和天空\n眼含尘土和热血\n扶着马头倒下。\n```\n\n\n\n>在夜色中\n>\n>我有三次受难：流浪，爱情，生存\n>\n>我有三种幸福：诗歌，王位，太阳\n>                           \n> <夜色>\n\n>当众人齐集河畔　\n>\n>高声歌唱生活\n>\n>我定会孤独返回空无一人的山峦\n>\n><晨雨时光>\n\n>你说你孤独\n>\n>就像很久以前\n>\n>长星照耀十三个州府的那种孤独\n>\n><歌或哭>\n\n安徽八州五府,天上微弱的星光照耀着遥远的家乡,而自己在遥远的远方,\"热闹是他们的,我什么也没有\",谁又能明白海子的孤独呢,又有谁能真正理解他的孤独呢!答案后来就都知道了.\n\n\n在<夏天的太阳>中海子这样写道\n\n>我想到在白天出生的孩子\n一定是出于故意\n你来人间一趟\n你要看看太阳\n和你的心上人\n一起走在街上\n\n海子把出生在太阳下的人看做是无比幸运的,是啊,能够直面阳光是多么美好的事情,心情失落的时候看看太阳,也会在心中重新升起希望吧,真的很羡慕这种人了.\n\n2015年3月26，我去了西藏。\n\n2018年3月26，我去了北京。\n\n似乎是个巧合，又似乎冥冥之中自有安排，三月是个春暖花开的时间，希望是春天的主旋律，一切还没有那么糟糕、那么绝望，在这种时间里自杀似乎又是很好的选择，太宰治说，我本想这个冬日就死去，可最近拿到一套鼠色细条纹的麻制和服，是适合夏天穿的和服，所以我还是活到夏天吧。海子没有等到夏天就在山海关结束了自己的生命。自杀更让海子添加了几分神秘，不要去追究当年究竟发生了什么，让神秘更神秘，让永恒更永恒，他带着对诗歌精神的信念走入了永恒，却把“面朝大海，春暖花开”的梦想留给了后人，留给了我们，留给了世世代代的年轻人。从海子的诗中，我们可以感受热腾腾的生命气息，暂时忘却生活的黯淡与现实的迷茫。\n有人说，海子是个试金石，当海子不能打动你的时候，说明你身上少年的东西已经没了。我也相信，诗歌的存在是为了证明我们并未老去，并未被完全物化。\n\n\n\n这位天才诗人，留下\n>今夜我遇见了世上的一切\n>\n>但不会遇见你\n\n\n的落寞，带着“喂马，劈柴，周游世界”的梦想，把阳光的温暖留在人间，却只给自己留下一个落日黄昏。\n\n最后篡改一句不太合适的诗吧：\n\n>海子\n>\n>今夜我不关心人类\n>\n>我只想你\n","source":"_posts/海子逝世三十周年.md","raw":"---\ntitle: 海子逝世三十周年\ndate: 2019-03-26 19:05:36\ntags: [海子,诗]\ncategories: 随想\n---\n\n那是整整三十年前的今天。\n\n黄昏，海子悄无声息地去了山海关，口袋里只有单程车票，没有酒钱。那是北方的早春，天气还没有暖和起来，小酒馆门口挂着厚厚的门帘，街角的玉兰树上光秃秃的，花苞还没有长出来。\n\n海子对酒馆老板说：“我给大家朗读我的诗，你能不能给我酒喝？”老板回答：“我可以给你酒喝，但你别在这儿朗诵。”周围的人笑起来，海子悻悻走开，再也没有回来。\n\n他找到一处无人的铁轨，躺好，平静地等待火车的到来，就像在等待一首优美的诗歌。那悲壮惨烈的一幕和那首《太阳》中的意境几乎一模一样：\n```\n正是黄昏时分\n无头英雄手指落日\n手指日落和天空\n眼含尘土和热血\n扶着马头倒下。\n```\n\n\n\n>在夜色中\n>\n>我有三次受难：流浪，爱情，生存\n>\n>我有三种幸福：诗歌，王位，太阳\n>                           \n> <夜色>\n\n>当众人齐集河畔　\n>\n>高声歌唱生活\n>\n>我定会孤独返回空无一人的山峦\n>\n><晨雨时光>\n\n>你说你孤独\n>\n>就像很久以前\n>\n>长星照耀十三个州府的那种孤独\n>\n><歌或哭>\n\n安徽八州五府,天上微弱的星光照耀着遥远的家乡,而自己在遥远的远方,\"热闹是他们的,我什么也没有\",谁又能明白海子的孤独呢,又有谁能真正理解他的孤独呢!答案后来就都知道了.\n\n\n在<夏天的太阳>中海子这样写道\n\n>我想到在白天出生的孩子\n一定是出于故意\n你来人间一趟\n你要看看太阳\n和你的心上人\n一起走在街上\n\n海子把出生在太阳下的人看做是无比幸运的,是啊,能够直面阳光是多么美好的事情,心情失落的时候看看太阳,也会在心中重新升起希望吧,真的很羡慕这种人了.\n\n2015年3月26，我去了西藏。\n\n2018年3月26，我去了北京。\n\n似乎是个巧合，又似乎冥冥之中自有安排，三月是个春暖花开的时间，希望是春天的主旋律，一切还没有那么糟糕、那么绝望，在这种时间里自杀似乎又是很好的选择，太宰治说，我本想这个冬日就死去，可最近拿到一套鼠色细条纹的麻制和服，是适合夏天穿的和服，所以我还是活到夏天吧。海子没有等到夏天就在山海关结束了自己的生命。自杀更让海子添加了几分神秘，不要去追究当年究竟发生了什么，让神秘更神秘，让永恒更永恒，他带着对诗歌精神的信念走入了永恒，却把“面朝大海，春暖花开”的梦想留给了后人，留给了我们，留给了世世代代的年轻人。从海子的诗中，我们可以感受热腾腾的生命气息，暂时忘却生活的黯淡与现实的迷茫。\n有人说，海子是个试金石，当海子不能打动你的时候，说明你身上少年的东西已经没了。我也相信，诗歌的存在是为了证明我们并未老去，并未被完全物化。\n\n\n\n这位天才诗人，留下\n>今夜我遇见了世上的一切\n>\n>但不会遇见你\n\n\n的落寞，带着“喂马，劈柴，周游世界”的梦想，把阳光的温暖留在人间，却只给自己留下一个落日黄昏。\n\n最后篡改一句不太合适的诗吧：\n\n>海子\n>\n>今夜我不关心人类\n>\n>我只想你\n","slug":"海子逝世三十周年","published":1,"updated":"2021-02-23T08:58:26.863Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckm4ekyox000desw4plkhec2t","content":"<p>那是整整三十年前的今天。</p>\n<p>黄昏，海子悄无声息地去了山海关，口袋里只有单程车票，没有酒钱。那是北方的早春，天气还没有暖和起来，小酒馆门口挂着厚厚的门帘，街角的玉兰树上光秃秃的，花苞还没有长出来。</p>\n<p>海子对酒馆老板说：“我给大家朗读我的诗，你能不能给我酒喝？”老板回答：“我可以给你酒喝，但你别在这儿朗诵。”周围的人笑起来，海子悻悻走开，再也没有回来。</p>\n<p>他找到一处无人的铁轨，躺好，平静地等待火车的到来，就像在等待一首优美的诗歌。那悲壮惨烈的一幕和那首《太阳》中的意境几乎一模一样：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">正是黄昏时分</span><br><span class=\"line\">无头英雄手指落日</span><br><span class=\"line\">手指日落和天空</span><br><span class=\"line\">眼含尘土和热血</span><br><span class=\"line\">扶着马头倒下。</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>在夜色中</p>\n<p>我有三次受难：流浪，爱情，生存</p>\n<p>我有三种幸福：诗歌，王位，太阳</p>\n<p>&lt;夜色&gt;</p>\n</blockquote>\n<blockquote>\n<p>当众人齐集河畔　</p>\n<p>高声歌唱生活</p>\n<p>我定会孤独返回空无一人的山峦</p>\n<p>&lt;晨雨时光&gt;</p>\n</blockquote>\n<blockquote>\n<p>你说你孤独</p>\n<p>就像很久以前</p>\n<p>长星照耀十三个州府的那种孤独</p>\n<p>&lt;歌或哭&gt;</p>\n</blockquote>\n<p>安徽八州五府,天上微弱的星光照耀着遥远的家乡,而自己在遥远的远方,”热闹是他们的,我什么也没有”,谁又能明白海子的孤独呢,又有谁能真正理解他的孤独呢!答案后来就都知道了.</p>\n<p>在&lt;夏天的太阳&gt;中海子这样写道</p>\n<blockquote>\n<p>我想到在白天出生的孩子<br>一定是出于故意<br>你来人间一趟<br>你要看看太阳<br>和你的心上人<br>一起走在街上</p>\n</blockquote>\n<p>海子把出生在太阳下的人看做是无比幸运的,是啊,能够直面阳光是多么美好的事情,心情失落的时候看看太阳,也会在心中重新升起希望吧,真的很羡慕这种人了.</p>\n<p>2015年3月26，我去了西藏。</p>\n<p>2018年3月26，我去了北京。</p>\n<p>似乎是个巧合，又似乎冥冥之中自有安排，三月是个春暖花开的时间，希望是春天的主旋律，一切还没有那么糟糕、那么绝望，在这种时间里自杀似乎又是很好的选择，太宰治说，我本想这个冬日就死去，可最近拿到一套鼠色细条纹的麻制和服，是适合夏天穿的和服，所以我还是活到夏天吧。海子没有等到夏天就在山海关结束了自己的生命。自杀更让海子添加了几分神秘，不要去追究当年究竟发生了什么，让神秘更神秘，让永恒更永恒，他带着对诗歌精神的信念走入了永恒，却把“面朝大海，春暖花开”的梦想留给了后人，留给了我们，留给了世世代代的年轻人。从海子的诗中，我们可以感受热腾腾的生命气息，暂时忘却生活的黯淡与现实的迷茫。<br>有人说，海子是个试金石，当海子不能打动你的时候，说明你身上少年的东西已经没了。我也相信，诗歌的存在是为了证明我们并未老去，并未被完全物化。</p>\n<p>这位天才诗人，留下</p>\n<blockquote>\n<p>今夜我遇见了世上的一切</p>\n<p>但不会遇见你</p>\n</blockquote>\n<p>的落寞，带着“喂马，劈柴，周游世界”的梦想，把阳光的温暖留在人间，却只给自己留下一个落日黄昏。</p>\n<p>最后篡改一句不太合适的诗吧：</p>\n<blockquote>\n<p>海子</p>\n<p>今夜我不关心人类</p>\n<p>我只想你</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>那是整整三十年前的今天。</p>\n<p>黄昏，海子悄无声息地去了山海关，口袋里只有单程车票，没有酒钱。那是北方的早春，天气还没有暖和起来，小酒馆门口挂着厚厚的门帘，街角的玉兰树上光秃秃的，花苞还没有长出来。</p>\n<p>海子对酒馆老板说：“我给大家朗读我的诗，你能不能给我酒喝？”老板回答：“我可以给你酒喝，但你别在这儿朗诵。”周围的人笑起来，海子悻悻走开，再也没有回来。</p>\n<p>他找到一处无人的铁轨，躺好，平静地等待火车的到来，就像在等待一首优美的诗歌。那悲壮惨烈的一幕和那首《太阳》中的意境几乎一模一样：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">正是黄昏时分</span><br><span class=\"line\">无头英雄手指落日</span><br><span class=\"line\">手指日落和天空</span><br><span class=\"line\">眼含尘土和热血</span><br><span class=\"line\">扶着马头倒下。</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>在夜色中</p>\n<p>我有三次受难：流浪，爱情，生存</p>\n<p>我有三种幸福：诗歌，王位，太阳</p>\n<p>&lt;夜色&gt;</p>\n</blockquote>\n<blockquote>\n<p>当众人齐集河畔　</p>\n<p>高声歌唱生活</p>\n<p>我定会孤独返回空无一人的山峦</p>\n<p>&lt;晨雨时光&gt;</p>\n</blockquote>\n<blockquote>\n<p>你说你孤独</p>\n<p>就像很久以前</p>\n<p>长星照耀十三个州府的那种孤独</p>\n<p>&lt;歌或哭&gt;</p>\n</blockquote>\n<p>安徽八州五府,天上微弱的星光照耀着遥远的家乡,而自己在遥远的远方,”热闹是他们的,我什么也没有”,谁又能明白海子的孤独呢,又有谁能真正理解他的孤独呢!答案后来就都知道了.</p>\n<p>在&lt;夏天的太阳&gt;中海子这样写道</p>\n<blockquote>\n<p>我想到在白天出生的孩子<br>一定是出于故意<br>你来人间一趟<br>你要看看太阳<br>和你的心上人<br>一起走在街上</p>\n</blockquote>\n<p>海子把出生在太阳下的人看做是无比幸运的,是啊,能够直面阳光是多么美好的事情,心情失落的时候看看太阳,也会在心中重新升起希望吧,真的很羡慕这种人了.</p>\n<p>2015年3月26，我去了西藏。</p>\n<p>2018年3月26，我去了北京。</p>\n<p>似乎是个巧合，又似乎冥冥之中自有安排，三月是个春暖花开的时间，希望是春天的主旋律，一切还没有那么糟糕、那么绝望，在这种时间里自杀似乎又是很好的选择，太宰治说，我本想这个冬日就死去，可最近拿到一套鼠色细条纹的麻制和服，是适合夏天穿的和服，所以我还是活到夏天吧。海子没有等到夏天就在山海关结束了自己的生命。自杀更让海子添加了几分神秘，不要去追究当年究竟发生了什么，让神秘更神秘，让永恒更永恒，他带着对诗歌精神的信念走入了永恒，却把“面朝大海，春暖花开”的梦想留给了后人，留给了我们，留给了世世代代的年轻人。从海子的诗中，我们可以感受热腾腾的生命气息，暂时忘却生活的黯淡与现实的迷茫。<br>有人说，海子是个试金石，当海子不能打动你的时候，说明你身上少年的东西已经没了。我也相信，诗歌的存在是为了证明我们并未老去，并未被完全物化。</p>\n<p>这位天才诗人，留下</p>\n<blockquote>\n<p>今夜我遇见了世上的一切</p>\n<p>但不会遇见你</p>\n</blockquote>\n<p>的落寞，带着“喂马，劈柴，周游世界”的梦想，把阳光的温暖留在人间，却只给自己留下一个落日黄昏。</p>\n<p>最后篡改一句不太合适的诗吧：</p>\n<blockquote>\n<p>海子</p>\n<p>今夜我不关心人类</p>\n<p>我只想你</p>\n</blockquote>\n"},{"title":"浅谈Docker","date":"2019-04-05T08:03:15.000Z","_content":"2013年发布至今， [Docker](https://www.docker.com/)一直广受瞩目，被认为可能会改变软件行业。今天就简单说说Docker.\n\n# 一.Docker的优点\n\n## 持续部署与测试\n\nDocker在开发与运维的世界中具有极大的吸引力，因为它能保持跨环境的一致性。在开发与发布的生命周期中，不同的环境具有细微的不同，这些差异可能是由于不同安装包的版本和依赖关系引起的。然而，Docker可以通过确保从开发到产品发布整个过程环境的一致性来解决这个问题*Docker容器通过相关配置，保持容器内部所有的配置和依赖关系始终不变。最终，你可以在开发到产品发布的整个过程中使用相同的容器来确保没有任何差异或者人工干预。\n\n使用Docker，你还可以确保开发者不需要配置完全相同的产品环境，他们可以在他们自己的系统上通过VirtualBox建立虚拟机来运行Docker容器。Docker的魅力在于它同样可以让你在亚马逊EC2实例上运行相同的容器。如果你需要在一个产品发布周期中完成一次升级，你可以很容易地将需要变更的东西放到Docker容器中，测试它们，并且使你已经存在的容器执行相同的变更。这种灵活性就是使用Docker的一个主要好处。和标准部署与集成过程一样，Docker可以让你构建、测试和发布镜像，这个镜像可以跨多个服务器进行部署。哪怕安装一个新的安全补丁，整个过程也是一样的。你可以安装补丁，然后测试它，并且将这个补丁发布到产品中。\n\n## 多云平台\n\nDocker最大的好处之一就是可移植性。在过去的几年里，所有主流的云计算提供商，包括亚马逊AWS和谷歌的GCP，都将Docker融入到他们的平台并增加了各自的支持。Docker容器能运行在亚马逊的EC2实例、谷歌的GCP实例、Rackspace服务器或者VirtualBox这些提供主机操作系统的平台上。举例来说，如果运行在亚马逊EC2实例上的Docker容器能够很容易地移植到其他几个平台上，比如说VirtualBox，并且达到类似的一致性和功能性，那这将允许你从基础设施层中抽象出来。除了AWS和GCP，Docker在其他不同的IaaS提供商也运行的非常好，例如微软的Azure、OpenStack和可以被具有不同配置的管理者所使用的Chef、Puppet、Ansible等。\n\n## 环境标准化和版本控制\n\n通过上面的讨论，Docker容器可以在不同的开发与产品发布生命周期中确保一致性，进而标准化你的环境。除此之外，Docker容器还可以像git仓库一样，可以让你提交变更到Docker镜像中并通过不同的版本来管理它们。设想如果你因为完成了一个组件的升级而导致你整个环境都损坏了，Docker可以让你轻松地回滚到这个镜像的前一个版本。这整个过程可以在几分钟内完成，如果和虚拟机的备份或者镜像创建流程对比，那Docker算相当快的，它可以让你快速地进行复制和实现冗余。此外，启动Docker就和运行一个进程一样快。\n\n## 隔离性\n\nDocker可以确保你的应用程序与资源是分隔开的。几个月前，Gartner发表了一篇报告，这份报告说明了运行Docker 容器进行资源隔离的效果和虚拟机（VM）管理程序一样的好，但是管理与控制方面还需要进行完善。\n\n我们考虑这样一个场景，你在你的虚拟机中运行了很多应用程序，这些应用程序包括团队协作软件（例如Confluence）、问题追踪软件（例如JIRA）、集中身份管理系统（例如Crowd）等等。由于这些软件运行在不同的端口上，所以你必须使用Apache或者Nginx来做反向代理。到目前为止，一切都很正常，但是随着你的环境向前推进，你需要在你现有的环境中配置一个内容管理系统（例如Alfresco）。这时候有个问题发生了，这个软件需要一个不同版本的Apache Tomcat，为了满足这个需求，你只能将你现有的软件迁移到另一个版本的Tomcat上，或者找到适合你现有Tomcat的内容管理系统（Alfresco）版本。\n\n对于上述场景，使用Docker就不用做这些事情了。Docker能够确保每个容器都拥有自己的资源，并且和其他容器是隔离的。你可以用不同的容器来运行使用不同堆栈的应用程序。除此之外，如果你想在服务器上直接删除一些应用程序是比较困难的，因为这样可能引发依赖关系冲突。而Docker可以帮你确保应用程序被完全清除，因为不同的应用程序运行在不同的容器上，如果你不在需要一款应用程序，那你可以简单地通过删除容器来删除这个应用程序，并且在你的宿主机操作系统上不会留下任何的临时文件或者配置文件。\n\n除了上述好处，Docker还能确保每个应用程序只使用分配给它的资源（包括CPU、内存和磁盘空间）。一个特殊的软件将不会使用你全部的可用资源，要不然这将导致性能降低，甚至让其他应用程序完全停止工作。\n\n## 安全性\n\n如上所述，Gartner也承认Docker正在快速地发展。从安全角度来看，Docker确保运行在容器中的应用程序和其他容器中的应用程序是完全分隔与隔离的，在通信流量和管理上赋予你完全的控制权。Docker容器不能窥视运行在其他容器中的进程。从体系结构角度来看，每个容器只使用着自己的资源（从进程到网络堆栈）。\n\n作为紧固安全的一种手段，Docker将宿主机操作系统上的敏感挂载点（例如/proc和/sys）作为只读挂载点，并且使用一种写时复制系统来确保容器不能读取其他容器的数据。Docker也限制了宿主机操作系统上的一些系统调用，并且和SELinux与AppArmor一起运行的很好。此外，在Docker Hub上可以使用的Docker镜像都通过数字签名来确保其可靠性。由于Docker容器是隔离的，并且资源是受限制的，所以即使你其中一个应用程序被黑，也不会影响运行在其它Docker容器上的应用程序。\n\n## 环境配置\n\n软件开发的第一件事就是配置开发环境,用户计算机的环境都不相同，你如何使自己开发的软件，能在别的机器跑起来？用户必须保证两件事：操作系统的设置，各种库和组件的安装。只有它们都正确，软件才能运行。Docker可以把软件和开发环境一并打包.\n\n# 二.虚拟机\n虚拟机（virtual machine）就是带环境安装的一种解决方案。它可以在一种操作系统里面运行另一种操作系统，比如在 Windows 系统里面运行 Linux 系统。应用程序对此毫无感知，因为虚拟机看上去跟真实系统一模一样，而对于底层系统来说，虚拟机就是一个普通文件，不需要了就删掉，对其他部分毫无影响。\n\n虽然用户可以通过虚拟机还原软件的原始环境。但是，这个方案有几个缺点。\n\n1. 资源占用多\n\n虚拟机会独占一部分内存和硬盘空间。它运行的时候，其他程序就不能使用这些资源了。哪怕虚拟机里面的应用程序，真正使用的内存只有 1MB，虚拟机依然需要几百 MB 的内存才能运行。\n\n2. 冗余步骤多\n\n虚拟机是完整的操作系统，一些系统级别的操作步骤，往往无法跳过，比如用户登录。\n\n3. 启动慢\n\n    启动操作系统需要多久，启动虚拟机就需要多久。可能要等几分钟，应\n用程序才能真正运行。\n\n# 三.Linux 容器\n由于虚拟机存在这些缺点，Linux 发展出了另一种虚拟化技术：Linux 容器（Linux Containers，缩写为 LXC）。\n\nLinux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。或者说，在正常进程的外面套了一个保护层。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离。\n\n由于容器是进程级别的，相比虚拟机有很多优势。\n\n1. 启动快\n\n容器里面的应用，直接就是底层系统的一个进程，而不是虚拟机内部的进程。所以，启动容器相当于启动本机的一个进程，而不是启动一个操作系统，速度就快很多。\n\n2. 资源占用少\n\n容器只占用需要的资源，不占用那些没有用到的资源；虚拟机由于是完整的操作系统，不可避免要占用所有资源。另外，多个容器可以共享资源，虚拟机都是独享资源。\n\n3. 体积小\n\n容器只要包含用到的组件即可，而虚拟机是整个操作系统的打包，所以容器文件比虚拟机文件要小很多。\n\n总之，容器有点像轻量级的虚拟机，能够提供虚拟化的环境，但是成本开销小得多。\n\n# 四. Docker是什么?\n\n\n> Docker is an open-source project that automates the deployment of applications inside software containers, by providing an additional layer of abstraction and automation of operating-system-level virtualization on Linux. Docker uses the resource isolation features of the Linux kernel such as cgroups and kernel namespaces, and a union-capable filesystem such as aufs and others to allow independent “containers” to run within a single Linux instance, avoiding the overhead of starting and maintaining virtual machines.Docker是一个开放源代码软件项目，让应用程序布署在软件容器下的工作可以自动化进行，借此在Linux操作系统上，提供一个额外的软件抽象层，以及操作系统层虚拟化的自动管理机制。Docker利用Linux核心中的资源分离机制，例如cgroups，以及Linux核心命名空间（name space），来建立独立的软件容器（containers）。这可以在单一Linux实体下运作，避免启动一个虚拟机器造成的额外负担。——摘自维基百科\n\n# 五. 安装Docker\nDocker包括两个版本,docker ce(Community Edition)社区版和\ndocker ee(Enterprise Edition)企业版.本篇所有内容只针对社区版.\n\nDocker的安装方式请参考[官方文档](https://docs.docker.com/install/overview/)\n\n安装完成执行`docker`命令会报 `permission denied` 没权限的错误\n\n一些Windowsers会说用`root`用户啊......另一些有基本常识,知道不应该使用`root`的人可能会说,\n那用`sudo docker`吧,这两种方法都是不对的,或者说不合适.\n\n说使用`root`的人，应该回去好好学习一下 `Linux` 权限常识。一般 不应该直接使用 `root` 用户，直接使用 `root` 用户不仅仅是严重的违反了安全规范，而且也极容易造成操作事故。这不是 `Windows` 世界，`Linux/Unix` 世界是有严格的权限要求的，只应该使用最小的权限做事情。如果还不熟悉 `Linux` 权限机制，那就去学习一下，不要把 `Windows `的坏毛病带过来。\n\n说使用 `sudo docker` 的人，思路是对的，因为理解了平时操作应该使用普通用户，只有在需要的时候，才 `sudo` 提升权限进行操作。但是问题就在这个需要二字上，事实上，不需要 `root` 权限就可以执行 `docker` 命令。\n\n其实如果看过官方安装文档的话都会知道，只需要将操作 `docker` 的用户，加入 `docker` 组，那么该用户既拥有了操作 `docker` 的权限。\n因此,只需要执行:\n\n```\nsudo usermod -aG docker $USER\n```\n把当前用户加入到`docker`组, 退出重新登录系统后,执行`docker info` 看一下,会发现可以不用`sudo docker`来执行`docker`命令了\n\n如果需要添加别的用户，将其中的 `$USER `换成对应的用户名即可。\n\n将用户添加到 `docker` 组，可以避免 root 权限误操作的问题，但是由于 dockerd 引擎是运行在 root 用户下的，而 docker 组成员有权限指挥 dockerd 引擎来做很多事情，因此，该用户实际上是拥有了 root 的权限的。因此不要误解了将当前用户加入 docker 组的初衷，这和赋予用户 sudo 权力是一样的，可不是说这个用户就没有 root 权限了。这样做，只\n是不再需要使用 sudo 了，也降低了使用 sudo 时误操作的可能。\n\nDocker是C-S架构,需要在本地先启动docker服务.\n```\n# service 命令的用法\n$ sudo service docker start\n\n# systemctl 命令的用法\n$ sudo systemctl start docker\n```\n\n# 六.image文件\n\nDocker 把应用程序及其依赖，打包在 image 文件里面。只有通过这个文件，才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。\n\nimage 是二进制文件。实际开发中，一个 image 文件往往通过继承另一个 image 文件，加上一些个性化设置而生成。\n\n对Docker images的操作\n```\n# 列出本机的所有 image 文件\ndocker images\n# 删除 image 文件\ndocker rmi xxx\n```\n\n# 七.Hello World!\n\ndocker 官方制作了Hello World的镜像.使用\n```\ndocker run hello-world\n```\ndocker会先检查本地有没有`hello-world`镜像,没有的话会从官方仓库中拉取.\n\n##  docker pull 慢怎么解决\n\n首先，要“感谢”伟大的墙。\n\n然后，我们可以使用 Docker 镜像加速器来解决这个问题，加速器就是镜像、代理的概念。国内有不少机构提供了免费的加速器以方便大家使用，这里列出一些常用的加速器服务：\n\n+ Docker 官方的中国镜像加速器：从2017年6月9日起，Docker 官方提供了在中国的加速器，以解决墙的问题。不用注册，直接使用加速器地址：https://registry.docker-cn.com 即可。\n+ 中国科技大学的镜像加速器：中科大的加速器不用注册，直接使用地址 https://docker.mirrors.ustc.edu.cn/ 配置加速器即可。进一步的信息可以访问：http://mirrors.ustc.edu.cn/help/dockerhub.html?highlight=docker\n+ 阿里云加速器：注册阿里云开发账户(免费的)后，访问这个链接就可以看到加速器地址： https://cr.console.aliyun.com/#/accelerator\n+ DaoCloud 加速器：注册 DaoCloud 账户(支持微信登录)，然后访问： https://www.daocloud.io/mirror#accelerator-doc\n\n## 访问官方文档很慢怎么办\n\n再次感谢伟大的 **墙**\n我们可以本地运行 Docker 官方文档的网站，以 docker 的方式：\n```\n$ docker run -d -p 80:4000 docs/docker.github.io\n```\n这样访问 Docker 宿主的 `80` 端口，如 http://localhost，就会看到官网文档了。\n\n# 八. Docker常用命令\n\n## 基础类\n\n1. 查看Docker信息\n```\n# 查看docker版本\ndocker version\n# 显示docker系统的信息\ndocker info\n# 日志信息\ndocker logs\n# 故障检查\ndocker status\n```\n2. 本地镜像\n\n查看本地镜像\n> docker images\n```\n(base)  alroy@Alan  ~  docker images\nREPOSITORY                   TAG                 IMAGE ID            CREATED             SIZE\nnginx                        latest              27a188018e18        2 weeks ago         109MB\nubuntu                       latest              94e814e2efa8        7 weeks ago         88.9MB\nhello-world                  latest              fce289e99eb9        4 months ago        1.84kB\nzsnmwy/bilihelper            latest              b108cce8590c        6 months ago        96.3MB\nzsnmwy/bilibili-live-tools   latest              e2b0e619d00a        9 months ago        112MB\n```\n删除本地镜像\n> docker rmi hello-world \n```\n(base)  alroy@Alan  ~  docker rmi hello-world\nError response from daemon: conflict: unable to remove repository reference \"hello-world\" (must force) - container 93b3b3af6661 is using its referenced image fce289e99eb9\n\n```\n正在运行的容器使用的镜像无法删除,想删除需先停止容器再删除镜像\n\n3. 查看镜像详情\n> docker inspect [ 镜像名 or 镜像 id ] \n\n4. 打包本地镜像, 使用压缩包来完成迁移\n\n> docker save [ 镜像名 ] > [ 文件路径 ]\n\n```\n# 默认为文件流输出\ndocker save ubuntu > /home/alroy/ubuntu.img\n\n# 或者使用 '-o' 选项指定输出文件路径\ndocker save -o ubuntu > /home/alroy/ubuntu.img\n```\n\n5. 导入镜像压缩包\n> docker load < [ 文件路径 ]\n```\n(base)  ✘ alroy@Alan  ~  docker load -i  /home/alroy/ubuntu.img \nLoaded image: ubuntu:latest\n```\n6.  修改镜像tag\n> docker tag [ 镜像名 or 镜像 id ] [ 新镜像名 ]:[ 新 tag ]\n\n```\n docker tag hello-world:latest hello-world:test\n```\n7. 日志\n\n> docker logs -f <容器名orID>\n\njournalctl 日志工具使用\n\n```\n# 最后行数的日志\njournalctl -n\n# 详细信息\njournalctl -f\n# 本次启动后的所有日志\njournalctl -b\n# 查看启动记录\njournalctl --list-boots\n# 查看某次运行过程中的日志\nsudo journalctl -b [启动顺序号，或者启动hash]\n# 查看记录中指定单元 docker.service 的日志\njournalctl -u docker.service\n```\n\n8. 查看容器信息\n\n```\n# 查看当前运行的容器\ndocker ps\n# 查看全部容器\ndocker ps -a\n# 查看全部容器的id和信息\ndocker ps -a -q\n# 查看全部容器占用的空间\ndocker ps -as\n# 查看一个正在运行容器进程，支持 ps 命令参数\ndocker top\n# 查看容器的示例id\nsudo docker inspect -f  '{{.Id}}' [id]\n# 检查镜像或者容器的参数，默认返回 JSON 格式\ndocker inspect\n```\n\n\n9. 启动停止容器等操作\n```\ndocker start|stop|restart [id]\n# 暂停|恢复 某一容器的所有进程\ndocker pause|unpause [id]\n# 杀死一个或多个指定容器进程\ndocker kill -s KILL [id]\n# 停止全部运行的容器\ndocker stop `docker ps -q`\n# 杀掉全部运行的容器\ndocker kill -s KILL `docker ps -q`\n```\n10. 交互式进入容器\n```\ndocker exec -it {{containerName or containerID}} bash\ndocker exec -i {{containerName or containerID}} bash\ndocker exec -t {{containerName or containerID}} bash\ndocker exec -d {{containerName or containerID}} bash\n```\n\n11. run命令常用选项\n\n选项 | 说明\n:--|:--\n-d | 后台运行容器, 并返回容器ID；不指定时, 启动后开始打印日志, Ctrl + C 退出命令同时会关闭容器\n-i |以交互模式运行容器, 通常与 -t 同时使用；\n-t |为容器重新分配一个伪输入终端, 通常与 -i 同时使用\n--name \"anyesu-container\" |为容器指定一个别名, 不指定时随机生成\n-h docker-anyesu |设置容器的主机名, 默认随机生成\n--dns 8.8.8.8 |指定容器使用的 DNS 服务器, 默认和宿主机一致\n-e docker_host=172.17.0.1 | 设置环境变量\n--cpuset=\"0-2\" or --cpuset=\"0,1,2\" | 绑定容器到指定 CPU 运行\n-m 100M | 设置容器使用内存最大值\n--net bridge | 指定容器的网络连接类型, 支持 bridge / host / none / container 四种类型\n--ip 172.18.0.13 | 为容器分配固定 ip ( 需要使用自定义网络 )\n--expose 8081 --expose 8082 | 开放一个端口或一组端口, 会覆盖镜像设置中开放的端口\n-p [宿主机端口]:[容器内端口] | 宿主机到容器的端口映射, 可指定宿主机的要监听的 ip, 默认为 0.0.0.0\n-P | 注意是大写的, 宿主机随机指定一组可用的端口映射容器 expose 的所有端口\n-v [宿主机目录路径]:[容器内目录路径] | 挂载宿主机的指定目录 ( 或文件 ) 到容器内的指定目录 ( 或文件 )\n--add-host [主机名]:[ip] | 为容器 hosts 文件追加 host , 默认会在 hosts 文件最后追加内容：[主机名]:[容器ip]\n--volumes-from [其他容器名] | 将其他容器的数据卷添加到此容器\n--link [其他容器名]:[在该容器中的别名] | 添加链接到另一个容器, 在本容器 hosts 文件中加入关联容器的记录, 效果类似于 --add-host\n\n\n剩个坑以后想起来再填(\n\n\n\n","source":"_posts/浅谈Docker.md","raw":"---\ntitle: 浅谈Docker\ndate: 2019-04-05 16:03:15\ntags: [Docker, 虚拟化]\ncategories: [云]\n---\n2013年发布至今， [Docker](https://www.docker.com/)一直广受瞩目，被认为可能会改变软件行业。今天就简单说说Docker.\n\n# 一.Docker的优点\n\n## 持续部署与测试\n\nDocker在开发与运维的世界中具有极大的吸引力，因为它能保持跨环境的一致性。在开发与发布的生命周期中，不同的环境具有细微的不同，这些差异可能是由于不同安装包的版本和依赖关系引起的。然而，Docker可以通过确保从开发到产品发布整个过程环境的一致性来解决这个问题*Docker容器通过相关配置，保持容器内部所有的配置和依赖关系始终不变。最终，你可以在开发到产品发布的整个过程中使用相同的容器来确保没有任何差异或者人工干预。\n\n使用Docker，你还可以确保开发者不需要配置完全相同的产品环境，他们可以在他们自己的系统上通过VirtualBox建立虚拟机来运行Docker容器。Docker的魅力在于它同样可以让你在亚马逊EC2实例上运行相同的容器。如果你需要在一个产品发布周期中完成一次升级，你可以很容易地将需要变更的东西放到Docker容器中，测试它们，并且使你已经存在的容器执行相同的变更。这种灵活性就是使用Docker的一个主要好处。和标准部署与集成过程一样，Docker可以让你构建、测试和发布镜像，这个镜像可以跨多个服务器进行部署。哪怕安装一个新的安全补丁，整个过程也是一样的。你可以安装补丁，然后测试它，并且将这个补丁发布到产品中。\n\n## 多云平台\n\nDocker最大的好处之一就是可移植性。在过去的几年里，所有主流的云计算提供商，包括亚马逊AWS和谷歌的GCP，都将Docker融入到他们的平台并增加了各自的支持。Docker容器能运行在亚马逊的EC2实例、谷歌的GCP实例、Rackspace服务器或者VirtualBox这些提供主机操作系统的平台上。举例来说，如果运行在亚马逊EC2实例上的Docker容器能够很容易地移植到其他几个平台上，比如说VirtualBox，并且达到类似的一致性和功能性，那这将允许你从基础设施层中抽象出来。除了AWS和GCP，Docker在其他不同的IaaS提供商也运行的非常好，例如微软的Azure、OpenStack和可以被具有不同配置的管理者所使用的Chef、Puppet、Ansible等。\n\n## 环境标准化和版本控制\n\n通过上面的讨论，Docker容器可以在不同的开发与产品发布生命周期中确保一致性，进而标准化你的环境。除此之外，Docker容器还可以像git仓库一样，可以让你提交变更到Docker镜像中并通过不同的版本来管理它们。设想如果你因为完成了一个组件的升级而导致你整个环境都损坏了，Docker可以让你轻松地回滚到这个镜像的前一个版本。这整个过程可以在几分钟内完成，如果和虚拟机的备份或者镜像创建流程对比，那Docker算相当快的，它可以让你快速地进行复制和实现冗余。此外，启动Docker就和运行一个进程一样快。\n\n## 隔离性\n\nDocker可以确保你的应用程序与资源是分隔开的。几个月前，Gartner发表了一篇报告，这份报告说明了运行Docker 容器进行资源隔离的效果和虚拟机（VM）管理程序一样的好，但是管理与控制方面还需要进行完善。\n\n我们考虑这样一个场景，你在你的虚拟机中运行了很多应用程序，这些应用程序包括团队协作软件（例如Confluence）、问题追踪软件（例如JIRA）、集中身份管理系统（例如Crowd）等等。由于这些软件运行在不同的端口上，所以你必须使用Apache或者Nginx来做反向代理。到目前为止，一切都很正常，但是随着你的环境向前推进，你需要在你现有的环境中配置一个内容管理系统（例如Alfresco）。这时候有个问题发生了，这个软件需要一个不同版本的Apache Tomcat，为了满足这个需求，你只能将你现有的软件迁移到另一个版本的Tomcat上，或者找到适合你现有Tomcat的内容管理系统（Alfresco）版本。\n\n对于上述场景，使用Docker就不用做这些事情了。Docker能够确保每个容器都拥有自己的资源，并且和其他容器是隔离的。你可以用不同的容器来运行使用不同堆栈的应用程序。除此之外，如果你想在服务器上直接删除一些应用程序是比较困难的，因为这样可能引发依赖关系冲突。而Docker可以帮你确保应用程序被完全清除，因为不同的应用程序运行在不同的容器上，如果你不在需要一款应用程序，那你可以简单地通过删除容器来删除这个应用程序，并且在你的宿主机操作系统上不会留下任何的临时文件或者配置文件。\n\n除了上述好处，Docker还能确保每个应用程序只使用分配给它的资源（包括CPU、内存和磁盘空间）。一个特殊的软件将不会使用你全部的可用资源，要不然这将导致性能降低，甚至让其他应用程序完全停止工作。\n\n## 安全性\n\n如上所述，Gartner也承认Docker正在快速地发展。从安全角度来看，Docker确保运行在容器中的应用程序和其他容器中的应用程序是完全分隔与隔离的，在通信流量和管理上赋予你完全的控制权。Docker容器不能窥视运行在其他容器中的进程。从体系结构角度来看，每个容器只使用着自己的资源（从进程到网络堆栈）。\n\n作为紧固安全的一种手段，Docker将宿主机操作系统上的敏感挂载点（例如/proc和/sys）作为只读挂载点，并且使用一种写时复制系统来确保容器不能读取其他容器的数据。Docker也限制了宿主机操作系统上的一些系统调用，并且和SELinux与AppArmor一起运行的很好。此外，在Docker Hub上可以使用的Docker镜像都通过数字签名来确保其可靠性。由于Docker容器是隔离的，并且资源是受限制的，所以即使你其中一个应用程序被黑，也不会影响运行在其它Docker容器上的应用程序。\n\n## 环境配置\n\n软件开发的第一件事就是配置开发环境,用户计算机的环境都不相同，你如何使自己开发的软件，能在别的机器跑起来？用户必须保证两件事：操作系统的设置，各种库和组件的安装。只有它们都正确，软件才能运行。Docker可以把软件和开发环境一并打包.\n\n# 二.虚拟机\n虚拟机（virtual machine）就是带环境安装的一种解决方案。它可以在一种操作系统里面运行另一种操作系统，比如在 Windows 系统里面运行 Linux 系统。应用程序对此毫无感知，因为虚拟机看上去跟真实系统一模一样，而对于底层系统来说，虚拟机就是一个普通文件，不需要了就删掉，对其他部分毫无影响。\n\n虽然用户可以通过虚拟机还原软件的原始环境。但是，这个方案有几个缺点。\n\n1. 资源占用多\n\n虚拟机会独占一部分内存和硬盘空间。它运行的时候，其他程序就不能使用这些资源了。哪怕虚拟机里面的应用程序，真正使用的内存只有 1MB，虚拟机依然需要几百 MB 的内存才能运行。\n\n2. 冗余步骤多\n\n虚拟机是完整的操作系统，一些系统级别的操作步骤，往往无法跳过，比如用户登录。\n\n3. 启动慢\n\n    启动操作系统需要多久，启动虚拟机就需要多久。可能要等几分钟，应\n用程序才能真正运行。\n\n# 三.Linux 容器\n由于虚拟机存在这些缺点，Linux 发展出了另一种虚拟化技术：Linux 容器（Linux Containers，缩写为 LXC）。\n\nLinux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。或者说，在正常进程的外面套了一个保护层。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离。\n\n由于容器是进程级别的，相比虚拟机有很多优势。\n\n1. 启动快\n\n容器里面的应用，直接就是底层系统的一个进程，而不是虚拟机内部的进程。所以，启动容器相当于启动本机的一个进程，而不是启动一个操作系统，速度就快很多。\n\n2. 资源占用少\n\n容器只占用需要的资源，不占用那些没有用到的资源；虚拟机由于是完整的操作系统，不可避免要占用所有资源。另外，多个容器可以共享资源，虚拟机都是独享资源。\n\n3. 体积小\n\n容器只要包含用到的组件即可，而虚拟机是整个操作系统的打包，所以容器文件比虚拟机文件要小很多。\n\n总之，容器有点像轻量级的虚拟机，能够提供虚拟化的环境，但是成本开销小得多。\n\n# 四. Docker是什么?\n\n\n> Docker is an open-source project that automates the deployment of applications inside software containers, by providing an additional layer of abstraction and automation of operating-system-level virtualization on Linux. Docker uses the resource isolation features of the Linux kernel such as cgroups and kernel namespaces, and a union-capable filesystem such as aufs and others to allow independent “containers” to run within a single Linux instance, avoiding the overhead of starting and maintaining virtual machines.Docker是一个开放源代码软件项目，让应用程序布署在软件容器下的工作可以自动化进行，借此在Linux操作系统上，提供一个额外的软件抽象层，以及操作系统层虚拟化的自动管理机制。Docker利用Linux核心中的资源分离机制，例如cgroups，以及Linux核心命名空间（name space），来建立独立的软件容器（containers）。这可以在单一Linux实体下运作，避免启动一个虚拟机器造成的额外负担。——摘自维基百科\n\n# 五. 安装Docker\nDocker包括两个版本,docker ce(Community Edition)社区版和\ndocker ee(Enterprise Edition)企业版.本篇所有内容只针对社区版.\n\nDocker的安装方式请参考[官方文档](https://docs.docker.com/install/overview/)\n\n安装完成执行`docker`命令会报 `permission denied` 没权限的错误\n\n一些Windowsers会说用`root`用户啊......另一些有基本常识,知道不应该使用`root`的人可能会说,\n那用`sudo docker`吧,这两种方法都是不对的,或者说不合适.\n\n说使用`root`的人，应该回去好好学习一下 `Linux` 权限常识。一般 不应该直接使用 `root` 用户，直接使用 `root` 用户不仅仅是严重的违反了安全规范，而且也极容易造成操作事故。这不是 `Windows` 世界，`Linux/Unix` 世界是有严格的权限要求的，只应该使用最小的权限做事情。如果还不熟悉 `Linux` 权限机制，那就去学习一下，不要把 `Windows `的坏毛病带过来。\n\n说使用 `sudo docker` 的人，思路是对的，因为理解了平时操作应该使用普通用户，只有在需要的时候，才 `sudo` 提升权限进行操作。但是问题就在这个需要二字上，事实上，不需要 `root` 权限就可以执行 `docker` 命令。\n\n其实如果看过官方安装文档的话都会知道，只需要将操作 `docker` 的用户，加入 `docker` 组，那么该用户既拥有了操作 `docker` 的权限。\n因此,只需要执行:\n\n```\nsudo usermod -aG docker $USER\n```\n把当前用户加入到`docker`组, 退出重新登录系统后,执行`docker info` 看一下,会发现可以不用`sudo docker`来执行`docker`命令了\n\n如果需要添加别的用户，将其中的 `$USER `换成对应的用户名即可。\n\n将用户添加到 `docker` 组，可以避免 root 权限误操作的问题，但是由于 dockerd 引擎是运行在 root 用户下的，而 docker 组成员有权限指挥 dockerd 引擎来做很多事情，因此，该用户实际上是拥有了 root 的权限的。因此不要误解了将当前用户加入 docker 组的初衷，这和赋予用户 sudo 权力是一样的，可不是说这个用户就没有 root 权限了。这样做，只\n是不再需要使用 sudo 了，也降低了使用 sudo 时误操作的可能。\n\nDocker是C-S架构,需要在本地先启动docker服务.\n```\n# service 命令的用法\n$ sudo service docker start\n\n# systemctl 命令的用法\n$ sudo systemctl start docker\n```\n\n# 六.image文件\n\nDocker 把应用程序及其依赖，打包在 image 文件里面。只有通过这个文件，才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。\n\nimage 是二进制文件。实际开发中，一个 image 文件往往通过继承另一个 image 文件，加上一些个性化设置而生成。\n\n对Docker images的操作\n```\n# 列出本机的所有 image 文件\ndocker images\n# 删除 image 文件\ndocker rmi xxx\n```\n\n# 七.Hello World!\n\ndocker 官方制作了Hello World的镜像.使用\n```\ndocker run hello-world\n```\ndocker会先检查本地有没有`hello-world`镜像,没有的话会从官方仓库中拉取.\n\n##  docker pull 慢怎么解决\n\n首先，要“感谢”伟大的墙。\n\n然后，我们可以使用 Docker 镜像加速器来解决这个问题，加速器就是镜像、代理的概念。国内有不少机构提供了免费的加速器以方便大家使用，这里列出一些常用的加速器服务：\n\n+ Docker 官方的中国镜像加速器：从2017年6月9日起，Docker 官方提供了在中国的加速器，以解决墙的问题。不用注册，直接使用加速器地址：https://registry.docker-cn.com 即可。\n+ 中国科技大学的镜像加速器：中科大的加速器不用注册，直接使用地址 https://docker.mirrors.ustc.edu.cn/ 配置加速器即可。进一步的信息可以访问：http://mirrors.ustc.edu.cn/help/dockerhub.html?highlight=docker\n+ 阿里云加速器：注册阿里云开发账户(免费的)后，访问这个链接就可以看到加速器地址： https://cr.console.aliyun.com/#/accelerator\n+ DaoCloud 加速器：注册 DaoCloud 账户(支持微信登录)，然后访问： https://www.daocloud.io/mirror#accelerator-doc\n\n## 访问官方文档很慢怎么办\n\n再次感谢伟大的 **墙**\n我们可以本地运行 Docker 官方文档的网站，以 docker 的方式：\n```\n$ docker run -d -p 80:4000 docs/docker.github.io\n```\n这样访问 Docker 宿主的 `80` 端口，如 http://localhost，就会看到官网文档了。\n\n# 八. Docker常用命令\n\n## 基础类\n\n1. 查看Docker信息\n```\n# 查看docker版本\ndocker version\n# 显示docker系统的信息\ndocker info\n# 日志信息\ndocker logs\n# 故障检查\ndocker status\n```\n2. 本地镜像\n\n查看本地镜像\n> docker images\n```\n(base)  alroy@Alan  ~  docker images\nREPOSITORY                   TAG                 IMAGE ID            CREATED             SIZE\nnginx                        latest              27a188018e18        2 weeks ago         109MB\nubuntu                       latest              94e814e2efa8        7 weeks ago         88.9MB\nhello-world                  latest              fce289e99eb9        4 months ago        1.84kB\nzsnmwy/bilihelper            latest              b108cce8590c        6 months ago        96.3MB\nzsnmwy/bilibili-live-tools   latest              e2b0e619d00a        9 months ago        112MB\n```\n删除本地镜像\n> docker rmi hello-world \n```\n(base)  alroy@Alan  ~  docker rmi hello-world\nError response from daemon: conflict: unable to remove repository reference \"hello-world\" (must force) - container 93b3b3af6661 is using its referenced image fce289e99eb9\n\n```\n正在运行的容器使用的镜像无法删除,想删除需先停止容器再删除镜像\n\n3. 查看镜像详情\n> docker inspect [ 镜像名 or 镜像 id ] \n\n4. 打包本地镜像, 使用压缩包来完成迁移\n\n> docker save [ 镜像名 ] > [ 文件路径 ]\n\n```\n# 默认为文件流输出\ndocker save ubuntu > /home/alroy/ubuntu.img\n\n# 或者使用 '-o' 选项指定输出文件路径\ndocker save -o ubuntu > /home/alroy/ubuntu.img\n```\n\n5. 导入镜像压缩包\n> docker load < [ 文件路径 ]\n```\n(base)  ✘ alroy@Alan  ~  docker load -i  /home/alroy/ubuntu.img \nLoaded image: ubuntu:latest\n```\n6.  修改镜像tag\n> docker tag [ 镜像名 or 镜像 id ] [ 新镜像名 ]:[ 新 tag ]\n\n```\n docker tag hello-world:latest hello-world:test\n```\n7. 日志\n\n> docker logs -f <容器名orID>\n\njournalctl 日志工具使用\n\n```\n# 最后行数的日志\njournalctl -n\n# 详细信息\njournalctl -f\n# 本次启动后的所有日志\njournalctl -b\n# 查看启动记录\njournalctl --list-boots\n# 查看某次运行过程中的日志\nsudo journalctl -b [启动顺序号，或者启动hash]\n# 查看记录中指定单元 docker.service 的日志\njournalctl -u docker.service\n```\n\n8. 查看容器信息\n\n```\n# 查看当前运行的容器\ndocker ps\n# 查看全部容器\ndocker ps -a\n# 查看全部容器的id和信息\ndocker ps -a -q\n# 查看全部容器占用的空间\ndocker ps -as\n# 查看一个正在运行容器进程，支持 ps 命令参数\ndocker top\n# 查看容器的示例id\nsudo docker inspect -f  '{{.Id}}' [id]\n# 检查镜像或者容器的参数，默认返回 JSON 格式\ndocker inspect\n```\n\n\n9. 启动停止容器等操作\n```\ndocker start|stop|restart [id]\n# 暂停|恢复 某一容器的所有进程\ndocker pause|unpause [id]\n# 杀死一个或多个指定容器进程\ndocker kill -s KILL [id]\n# 停止全部运行的容器\ndocker stop `docker ps -q`\n# 杀掉全部运行的容器\ndocker kill -s KILL `docker ps -q`\n```\n10. 交互式进入容器\n```\ndocker exec -it {{containerName or containerID}} bash\ndocker exec -i {{containerName or containerID}} bash\ndocker exec -t {{containerName or containerID}} bash\ndocker exec -d {{containerName or containerID}} bash\n```\n\n11. run命令常用选项\n\n选项 | 说明\n:--|:--\n-d | 后台运行容器, 并返回容器ID；不指定时, 启动后开始打印日志, Ctrl + C 退出命令同时会关闭容器\n-i |以交互模式运行容器, 通常与 -t 同时使用；\n-t |为容器重新分配一个伪输入终端, 通常与 -i 同时使用\n--name \"anyesu-container\" |为容器指定一个别名, 不指定时随机生成\n-h docker-anyesu |设置容器的主机名, 默认随机生成\n--dns 8.8.8.8 |指定容器使用的 DNS 服务器, 默认和宿主机一致\n-e docker_host=172.17.0.1 | 设置环境变量\n--cpuset=\"0-2\" or --cpuset=\"0,1,2\" | 绑定容器到指定 CPU 运行\n-m 100M | 设置容器使用内存最大值\n--net bridge | 指定容器的网络连接类型, 支持 bridge / host / none / container 四种类型\n--ip 172.18.0.13 | 为容器分配固定 ip ( 需要使用自定义网络 )\n--expose 8081 --expose 8082 | 开放一个端口或一组端口, 会覆盖镜像设置中开放的端口\n-p [宿主机端口]:[容器内端口] | 宿主机到容器的端口映射, 可指定宿主机的要监听的 ip, 默认为 0.0.0.0\n-P | 注意是大写的, 宿主机随机指定一组可用的端口映射容器 expose 的所有端口\n-v [宿主机目录路径]:[容器内目录路径] | 挂载宿主机的指定目录 ( 或文件 ) 到容器内的指定目录 ( 或文件 )\n--add-host [主机名]:[ip] | 为容器 hosts 文件追加 host , 默认会在 hosts 文件最后追加内容：[主机名]:[容器ip]\n--volumes-from [其他容器名] | 将其他容器的数据卷添加到此容器\n--link [其他容器名]:[在该容器中的别名] | 添加链接到另一个容器, 在本容器 hosts 文件中加入关联容器的记录, 效果类似于 --add-host\n\n\n剩个坑以后想起来再填(\n\n\n\n","slug":"浅谈Docker","published":1,"updated":"2021-02-23T08:58:26.863Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckm4ekyoz000eesw4m0kc1rq8","content":"<p>2013年发布至今， <a href=\"https://www.docker.com/\" target=\"_blank\" rel=\"noopener\">Docker</a>一直广受瞩目，被认为可能会改变软件行业。今天就简单说说Docker.</p>\n<h1 id=\"一-Docker的优点\"><a href=\"#一-Docker的优点\" class=\"headerlink\" title=\"一.Docker的优点\"></a>一.Docker的优点</h1><h2 id=\"持续部署与测试\"><a href=\"#持续部署与测试\" class=\"headerlink\" title=\"持续部署与测试\"></a>持续部署与测试</h2><p>Docker在开发与运维的世界中具有极大的吸引力，因为它能保持跨环境的一致性。在开发与发布的生命周期中，不同的环境具有细微的不同，这些差异可能是由于不同安装包的版本和依赖关系引起的。然而，Docker可以通过确保从开发到产品发布整个过程环境的一致性来解决这个问题*Docker容器通过相关配置，保持容器内部所有的配置和依赖关系始终不变。最终，你可以在开发到产品发布的整个过程中使用相同的容器来确保没有任何差异或者人工干预。</p>\n<p>使用Docker，你还可以确保开发者不需要配置完全相同的产品环境，他们可以在他们自己的系统上通过VirtualBox建立虚拟机来运行Docker容器。Docker的魅力在于它同样可以让你在亚马逊EC2实例上运行相同的容器。如果你需要在一个产品发布周期中完成一次升级，你可以很容易地将需要变更的东西放到Docker容器中，测试它们，并且使你已经存在的容器执行相同的变更。这种灵活性就是使用Docker的一个主要好处。和标准部署与集成过程一样，Docker可以让你构建、测试和发布镜像，这个镜像可以跨多个服务器进行部署。哪怕安装一个新的安全补丁，整个过程也是一样的。你可以安装补丁，然后测试它，并且将这个补丁发布到产品中。</p>\n<h2 id=\"多云平台\"><a href=\"#多云平台\" class=\"headerlink\" title=\"多云平台\"></a>多云平台</h2><p>Docker最大的好处之一就是可移植性。在过去的几年里，所有主流的云计算提供商，包括亚马逊AWS和谷歌的GCP，都将Docker融入到他们的平台并增加了各自的支持。Docker容器能运行在亚马逊的EC2实例、谷歌的GCP实例、Rackspace服务器或者VirtualBox这些提供主机操作系统的平台上。举例来说，如果运行在亚马逊EC2实例上的Docker容器能够很容易地移植到其他几个平台上，比如说VirtualBox，并且达到类似的一致性和功能性，那这将允许你从基础设施层中抽象出来。除了AWS和GCP，Docker在其他不同的IaaS提供商也运行的非常好，例如微软的Azure、OpenStack和可以被具有不同配置的管理者所使用的Chef、Puppet、Ansible等。</p>\n<h2 id=\"环境标准化和版本控制\"><a href=\"#环境标准化和版本控制\" class=\"headerlink\" title=\"环境标准化和版本控制\"></a>环境标准化和版本控制</h2><p>通过上面的讨论，Docker容器可以在不同的开发与产品发布生命周期中确保一致性，进而标准化你的环境。除此之外，Docker容器还可以像git仓库一样，可以让你提交变更到Docker镜像中并通过不同的版本来管理它们。设想如果你因为完成了一个组件的升级而导致你整个环境都损坏了，Docker可以让你轻松地回滚到这个镜像的前一个版本。这整个过程可以在几分钟内完成，如果和虚拟机的备份或者镜像创建流程对比，那Docker算相当快的，它可以让你快速地进行复制和实现冗余。此外，启动Docker就和运行一个进程一样快。</p>\n<h2 id=\"隔离性\"><a href=\"#隔离性\" class=\"headerlink\" title=\"隔离性\"></a>隔离性</h2><p>Docker可以确保你的应用程序与资源是分隔开的。几个月前，Gartner发表了一篇报告，这份报告说明了运行Docker 容器进行资源隔离的效果和虚拟机（VM）管理程序一样的好，但是管理与控制方面还需要进行完善。</p>\n<p>我们考虑这样一个场景，你在你的虚拟机中运行了很多应用程序，这些应用程序包括团队协作软件（例如Confluence）、问题追踪软件（例如JIRA）、集中身份管理系统（例如Crowd）等等。由于这些软件运行在不同的端口上，所以你必须使用Apache或者Nginx来做反向代理。到目前为止，一切都很正常，但是随着你的环境向前推进，你需要在你现有的环境中配置一个内容管理系统（例如Alfresco）。这时候有个问题发生了，这个软件需要一个不同版本的Apache Tomcat，为了满足这个需求，你只能将你现有的软件迁移到另一个版本的Tomcat上，或者找到适合你现有Tomcat的内容管理系统（Alfresco）版本。</p>\n<p>对于上述场景，使用Docker就不用做这些事情了。Docker能够确保每个容器都拥有自己的资源，并且和其他容器是隔离的。你可以用不同的容器来运行使用不同堆栈的应用程序。除此之外，如果你想在服务器上直接删除一些应用程序是比较困难的，因为这样可能引发依赖关系冲突。而Docker可以帮你确保应用程序被完全清除，因为不同的应用程序运行在不同的容器上，如果你不在需要一款应用程序，那你可以简单地通过删除容器来删除这个应用程序，并且在你的宿主机操作系统上不会留下任何的临时文件或者配置文件。</p>\n<p>除了上述好处，Docker还能确保每个应用程序只使用分配给它的资源（包括CPU、内存和磁盘空间）。一个特殊的软件将不会使用你全部的可用资源，要不然这将导致性能降低，甚至让其他应用程序完全停止工作。</p>\n<h2 id=\"安全性\"><a href=\"#安全性\" class=\"headerlink\" title=\"安全性\"></a>安全性</h2><p>如上所述，Gartner也承认Docker正在快速地发展。从安全角度来看，Docker确保运行在容器中的应用程序和其他容器中的应用程序是完全分隔与隔离的，在通信流量和管理上赋予你完全的控制权。Docker容器不能窥视运行在其他容器中的进程。从体系结构角度来看，每个容器只使用着自己的资源（从进程到网络堆栈）。</p>\n<p>作为紧固安全的一种手段，Docker将宿主机操作系统上的敏感挂载点（例如/proc和/sys）作为只读挂载点，并且使用一种写时复制系统来确保容器不能读取其他容器的数据。Docker也限制了宿主机操作系统上的一些系统调用，并且和SELinux与AppArmor一起运行的很好。此外，在Docker Hub上可以使用的Docker镜像都通过数字签名来确保其可靠性。由于Docker容器是隔离的，并且资源是受限制的，所以即使你其中一个应用程序被黑，也不会影响运行在其它Docker容器上的应用程序。</p>\n<h2 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h2><p>软件开发的第一件事就是配置开发环境,用户计算机的环境都不相同，你如何使自己开发的软件，能在别的机器跑起来？用户必须保证两件事：操作系统的设置，各种库和组件的安装。只有它们都正确，软件才能运行。Docker可以把软件和开发环境一并打包.</p>\n<h1 id=\"二-虚拟机\"><a href=\"#二-虚拟机\" class=\"headerlink\" title=\"二.虚拟机\"></a>二.虚拟机</h1><p>虚拟机（virtual machine）就是带环境安装的一种解决方案。它可以在一种操作系统里面运行另一种操作系统，比如在 Windows 系统里面运行 Linux 系统。应用程序对此毫无感知，因为虚拟机看上去跟真实系统一模一样，而对于底层系统来说，虚拟机就是一个普通文件，不需要了就删掉，对其他部分毫无影响。</p>\n<p>虽然用户可以通过虚拟机还原软件的原始环境。但是，这个方案有几个缺点。</p>\n<ol>\n<li>资源占用多</li>\n</ol>\n<p>虚拟机会独占一部分内存和硬盘空间。它运行的时候，其他程序就不能使用这些资源了。哪怕虚拟机里面的应用程序，真正使用的内存只有 1MB，虚拟机依然需要几百 MB 的内存才能运行。</p>\n<ol start=\"2\">\n<li>冗余步骤多</li>\n</ol>\n<p>虚拟机是完整的操作系统，一些系统级别的操作步骤，往往无法跳过，比如用户登录。</p>\n<ol start=\"3\">\n<li><p>启动慢</p>\n<p> 启动操作系统需要多久，启动虚拟机就需要多久。可能要等几分钟，应<br>用程序才能真正运行。</p>\n</li>\n</ol>\n<h1 id=\"三-Linux-容器\"><a href=\"#三-Linux-容器\" class=\"headerlink\" title=\"三.Linux 容器\"></a>三.Linux 容器</h1><p>由于虚拟机存在这些缺点，Linux 发展出了另一种虚拟化技术：Linux 容器（Linux Containers，缩写为 LXC）。</p>\n<p>Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。或者说，在正常进程的外面套了一个保护层。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离。</p>\n<p>由于容器是进程级别的，相比虚拟机有很多优势。</p>\n<ol>\n<li>启动快</li>\n</ol>\n<p>容器里面的应用，直接就是底层系统的一个进程，而不是虚拟机内部的进程。所以，启动容器相当于启动本机的一个进程，而不是启动一个操作系统，速度就快很多。</p>\n<ol start=\"2\">\n<li>资源占用少</li>\n</ol>\n<p>容器只占用需要的资源，不占用那些没有用到的资源；虚拟机由于是完整的操作系统，不可避免要占用所有资源。另外，多个容器可以共享资源，虚拟机都是独享资源。</p>\n<ol start=\"3\">\n<li>体积小</li>\n</ol>\n<p>容器只要包含用到的组件即可，而虚拟机是整个操作系统的打包，所以容器文件比虚拟机文件要小很多。</p>\n<p>总之，容器有点像轻量级的虚拟机，能够提供虚拟化的环境，但是成本开销小得多。</p>\n<h1 id=\"四-Docker是什么\"><a href=\"#四-Docker是什么\" class=\"headerlink\" title=\"四. Docker是什么?\"></a>四. Docker是什么?</h1><blockquote>\n<p>Docker is an open-source project that automates the deployment of applications inside software containers, by providing an additional layer of abstraction and automation of operating-system-level virtualization on Linux. Docker uses the resource isolation features of the Linux kernel such as cgroups and kernel namespaces, and a union-capable filesystem such as aufs and others to allow independent “containers” to run within a single Linux instance, avoiding the overhead of starting and maintaining virtual machines.Docker是一个开放源代码软件项目，让应用程序布署在软件容器下的工作可以自动化进行，借此在Linux操作系统上，提供一个额外的软件抽象层，以及操作系统层虚拟化的自动管理机制。Docker利用Linux核心中的资源分离机制，例如cgroups，以及Linux核心命名空间（name space），来建立独立的软件容器（containers）。这可以在单一Linux实体下运作，避免启动一个虚拟机器造成的额外负担。——摘自维基百科</p>\n</blockquote>\n<h1 id=\"五-安装Docker\"><a href=\"#五-安装Docker\" class=\"headerlink\" title=\"五. 安装Docker\"></a>五. 安装Docker</h1><p>Docker包括两个版本,docker ce(Community Edition)社区版和<br>docker ee(Enterprise Edition)企业版.本篇所有内容只针对社区版.</p>\n<p>Docker的安装方式请参考<a href=\"https://docs.docker.com/install/overview/\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<p>安装完成执行<code>docker</code>命令会报 <code>permission denied</code> 没权限的错误</p>\n<p>一些Windowsers会说用<code>root</code>用户啊……另一些有基本常识,知道不应该使用<code>root</code>的人可能会说,<br>那用<code>sudo docker</code>吧,这两种方法都是不对的,或者说不合适.</p>\n<p>说使用<code>root</code>的人，应该回去好好学习一下 <code>Linux</code> 权限常识。一般 不应该直接使用 <code>root</code> 用户，直接使用 <code>root</code> 用户不仅仅是严重的违反了安全规范，而且也极容易造成操作事故。这不是 <code>Windows</code> 世界，<code>Linux/Unix</code> 世界是有严格的权限要求的，只应该使用最小的权限做事情。如果还不熟悉 <code>Linux</code> 权限机制，那就去学习一下，不要把 <code>Windows</code>的坏毛病带过来。</p>\n<p>说使用 <code>sudo docker</code> 的人，思路是对的，因为理解了平时操作应该使用普通用户，只有在需要的时候，才 <code>sudo</code> 提升权限进行操作。但是问题就在这个需要二字上，事实上，不需要 <code>root</code> 权限就可以执行 <code>docker</code> 命令。</p>\n<p>其实如果看过官方安装文档的话都会知道，只需要将操作 <code>docker</code> 的用户，加入 <code>docker</code> 组，那么该用户既拥有了操作 <code>docker</code> 的权限。<br>因此,只需要执行:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo usermod -aG docker $USER</span><br></pre></td></tr></table></figure>\n<p>把当前用户加入到<code>docker</code>组, 退出重新登录系统后,执行<code>docker info</code> 看一下,会发现可以不用<code>sudo docker</code>来执行<code>docker</code>命令了</p>\n<p>如果需要添加别的用户，将其中的 <code>$USER</code>换成对应的用户名即可。</p>\n<p>将用户添加到 <code>docker</code> 组，可以避免 root 权限误操作的问题，但是由于 dockerd 引擎是运行在 root 用户下的，而 docker 组成员有权限指挥 dockerd 引擎来做很多事情，因此，该用户实际上是拥有了 root 的权限的。因此不要误解了将当前用户加入 docker 组的初衷，这和赋予用户 sudo 权力是一样的，可不是说这个用户就没有 root 权限了。这样做，只<br>是不再需要使用 sudo 了，也降低了使用 sudo 时误操作的可能。</p>\n<p>Docker是C-S架构,需要在本地先启动docker服务.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># service 命令的用法</span><br><span class=\"line\">$ sudo service docker start</span><br><span class=\"line\"></span><br><span class=\"line\"># systemctl 命令的用法</span><br><span class=\"line\">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"六-image文件\"><a href=\"#六-image文件\" class=\"headerlink\" title=\"六.image文件\"></a>六.image文件</h1><p>Docker 把应用程序及其依赖，打包在 image 文件里面。只有通过这个文件，才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。</p>\n<p>image 是二进制文件。实际开发中，一个 image 文件往往通过继承另一个 image 文件，加上一些个性化设置而生成。</p>\n<p>对Docker images的操作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 列出本机的所有 image 文件</span><br><span class=\"line\">docker images</span><br><span class=\"line\"># 删除 image 文件</span><br><span class=\"line\">docker rmi xxx</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"七-Hello-World\"><a href=\"#七-Hello-World\" class=\"headerlink\" title=\"七.Hello World!\"></a>七.Hello World!</h1><p>docker 官方制作了Hello World的镜像.使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run hello-world</span><br></pre></td></tr></table></figure></p>\n<p>docker会先检查本地有没有<code>hello-world</code>镜像,没有的话会从官方仓库中拉取.</p>\n<h2 id=\"docker-pull-慢怎么解决\"><a href=\"#docker-pull-慢怎么解决\" class=\"headerlink\" title=\"docker pull 慢怎么解决\"></a>docker pull 慢怎么解决</h2><p>首先，要“感谢”伟大的墙。</p>\n<p>然后，我们可以使用 Docker 镜像加速器来解决这个问题，加速器就是镜像、代理的概念。国内有不少机构提供了免费的加速器以方便大家使用，这里列出一些常用的加速器服务：</p>\n<ul>\n<li>Docker 官方的中国镜像加速器：从2017年6月9日起，Docker 官方提供了在中国的加速器，以解决墙的问题。不用注册，直接使用加速器地址：<a href=\"https://registry.docker-cn.com\" target=\"_blank\" rel=\"noopener\">https://registry.docker-cn.com</a> 即可。</li>\n<li>中国科技大学的镜像加速器：中科大的加速器不用注册，直接使用地址 <a href=\"https://docker.mirrors.ustc.edu.cn/\" target=\"_blank\" rel=\"noopener\">https://docker.mirrors.ustc.edu.cn/</a> 配置加速器即可。进一步的信息可以访问：<a href=\"http://mirrors.ustc.edu.cn/help/dockerhub.html?highlight=docker\" target=\"_blank\" rel=\"noopener\">http://mirrors.ustc.edu.cn/help/dockerhub.html?highlight=docker</a></li>\n<li>阿里云加速器：注册阿里云开发账户(免费的)后，访问这个链接就可以看到加速器地址： <a href=\"https://cr.console.aliyun.com/#/accelerator\" target=\"_blank\" rel=\"noopener\">https://cr.console.aliyun.com/#/accelerator</a></li>\n<li>DaoCloud 加速器：注册 DaoCloud 账户(支持微信登录)，然后访问： <a href=\"https://www.daocloud.io/mirror#accelerator-doc\" target=\"_blank\" rel=\"noopener\">https://www.daocloud.io/mirror#accelerator-doc</a></li>\n</ul>\n<h2 id=\"访问官方文档很慢怎么办\"><a href=\"#访问官方文档很慢怎么办\" class=\"headerlink\" title=\"访问官方文档很慢怎么办\"></a>访问官方文档很慢怎么办</h2><p>再次感谢伟大的 <strong>墙</strong><br>我们可以本地运行 Docker 官方文档的网站，以 docker 的方式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -d -p 80:4000 docs/docker.github.io</span><br></pre></td></tr></table></figure></p>\n<p>这样访问 Docker 宿主的 <code>80</code> 端口，如 <a href=\"http://localhost，就会看到官网文档了。\" target=\"_blank\" rel=\"noopener\">http://localhost，就会看到官网文档了。</a></p>\n<h1 id=\"八-Docker常用命令\"><a href=\"#八-Docker常用命令\" class=\"headerlink\" title=\"八. Docker常用命令\"></a>八. Docker常用命令</h1><h2 id=\"基础类\"><a href=\"#基础类\" class=\"headerlink\" title=\"基础类\"></a>基础类</h2><ol>\n<li><p>查看Docker信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看docker版本</span><br><span class=\"line\">docker version</span><br><span class=\"line\"># 显示docker系统的信息</span><br><span class=\"line\">docker info</span><br><span class=\"line\"># 日志信息</span><br><span class=\"line\">docker logs</span><br><span class=\"line\"># 故障检查</span><br><span class=\"line\">docker status</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>本地镜像</p>\n</li>\n</ol>\n<p>查看本地镜像</p>\n<blockquote>\n<p>docker images<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(base)  alroy@Alan  ~  docker images</span><br><span class=\"line\">REPOSITORY                   TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">nginx                        latest              27a188018e18        2 weeks ago         109MB</span><br><span class=\"line\">ubuntu                       latest              94e814e2efa8        7 weeks ago         88.9MB</span><br><span class=\"line\">hello-world                  latest              fce289e99eb9        4 months ago        1.84kB</span><br><span class=\"line\">zsnmwy/bilihelper            latest              b108cce8590c        6 months ago        96.3MB</span><br><span class=\"line\">zsnmwy/bilibili-live-tools   latest              e2b0e619d00a        9 months ago        112MB</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>删除本地镜像</p>\n<blockquote>\n<p>docker rmi hello-world<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(base)  alroy@Alan  ~  docker rmi hello-world</span><br><span class=\"line\">Error response from daemon: conflict: unable to remove repository reference &quot;hello-world&quot; (must force) - container 93b3b3af6661 is using its referenced image fce289e99eb9</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>正在运行的容器使用的镜像无法删除,想删除需先停止容器再删除镜像</p>\n<ol start=\"3\">\n<li><p>查看镜像详情</p>\n<blockquote>\n<p>docker inspect [ 镜像名 or 镜像 id ] </p>\n</blockquote>\n</li>\n<li><p>打包本地镜像, 使用压缩包来完成迁移</p>\n</li>\n</ol>\n<blockquote>\n<p>docker save [ 镜像名 ] &gt; [ 文件路径 ]</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 默认为文件流输出</span><br><span class=\"line\">docker save ubuntu &gt; /home/alroy/ubuntu.img</span><br><span class=\"line\"></span><br><span class=\"line\"># 或者使用 &apos;-o&apos; 选项指定输出文件路径</span><br><span class=\"line\">docker save -o ubuntu &gt; /home/alroy/ubuntu.img</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li><p>导入镜像压缩包</p>\n<blockquote>\n<p>docker load &lt; [ 文件路径 ]</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(base)  ✘ alroy@Alan  ~  docker load -i  /home/alroy/ubuntu.img </span><br><span class=\"line\">Loaded image: ubuntu:latest</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>修改镜像tag</p>\n<blockquote>\n<p>docker tag [ 镜像名 or 镜像 id ] [ 新镜像名 ]:[ 新 tag ]</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker tag hello-world:latest hello-world:test</span><br></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>日志</li>\n</ol>\n<blockquote>\n<p>docker logs -f &lt;容器名orID&gt;</p>\n</blockquote>\n<p>journalctl 日志工具使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 最后行数的日志</span><br><span class=\"line\">journalctl -n</span><br><span class=\"line\"># 详细信息</span><br><span class=\"line\">journalctl -f</span><br><span class=\"line\"># 本次启动后的所有日志</span><br><span class=\"line\">journalctl -b</span><br><span class=\"line\"># 查看启动记录</span><br><span class=\"line\">journalctl --list-boots</span><br><span class=\"line\"># 查看某次运行过程中的日志</span><br><span class=\"line\">sudo journalctl -b [启动顺序号，或者启动hash]</span><br><span class=\"line\"># 查看记录中指定单元 docker.service 的日志</span><br><span class=\"line\">journalctl -u docker.service</span><br></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>查看容器信息</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看当前运行的容器</span><br><span class=\"line\">docker ps</span><br><span class=\"line\"># 查看全部容器</span><br><span class=\"line\">docker ps -a</span><br><span class=\"line\"># 查看全部容器的id和信息</span><br><span class=\"line\">docker ps -a -q</span><br><span class=\"line\"># 查看全部容器占用的空间</span><br><span class=\"line\">docker ps -as</span><br><span class=\"line\"># 查看一个正在运行容器进程，支持 ps 命令参数</span><br><span class=\"line\">docker top</span><br><span class=\"line\"># 查看容器的示例id</span><br><span class=\"line\">sudo docker inspect -f  &apos;&#123;&#123;.Id&#125;&#125;&apos; [id]</span><br><span class=\"line\"># 检查镜像或者容器的参数，默认返回 JSON 格式</span><br><span class=\"line\">docker inspect</span><br></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li><p>启动停止容器等操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start|stop|restart [id]</span><br><span class=\"line\"># 暂停|恢复 某一容器的所有进程</span><br><span class=\"line\">docker pause|unpause [id]</span><br><span class=\"line\"># 杀死一个或多个指定容器进程</span><br><span class=\"line\">docker kill -s KILL [id]</span><br><span class=\"line\"># 停止全部运行的容器</span><br><span class=\"line\">docker stop `docker ps -q`</span><br><span class=\"line\"># 杀掉全部运行的容器</span><br><span class=\"line\">docker kill -s KILL `docker ps -q`</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>交互式进入容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it &#123;&#123;containerName or containerID&#125;&#125; bash</span><br><span class=\"line\">docker exec -i &#123;&#123;containerName or containerID&#125;&#125; bash</span><br><span class=\"line\">docker exec -t &#123;&#123;containerName or containerID&#125;&#125; bash</span><br><span class=\"line\">docker exec -d &#123;&#123;containerName or containerID&#125;&#125; bash</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>run命令常用选项</p>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">选项</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">-d</td>\n<td style=\"text-align:left\">后台运行容器, 并返回容器ID；不指定时, 启动后开始打印日志, Ctrl + C 退出命令同时会关闭容器</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-i</td>\n<td style=\"text-align:left\">以交互模式运行容器, 通常与 -t 同时使用；</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-t</td>\n<td style=\"text-align:left\">为容器重新分配一个伪输入终端, 通常与 -i 同时使用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–name “anyesu-container”</td>\n<td style=\"text-align:left\">为容器指定一个别名, 不指定时随机生成</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-h docker-anyesu</td>\n<td style=\"text-align:left\">设置容器的主机名, 默认随机生成</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–dns 8.8.8.8</td>\n<td style=\"text-align:left\">指定容器使用的 DNS 服务器, 默认和宿主机一致</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-e docker_host=172.17.0.1</td>\n<td style=\"text-align:left\">设置环境变量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–cpuset=”0-2” or –cpuset=”0,1,2”</td>\n<td style=\"text-align:left\">绑定容器到指定 CPU 运行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-m 100M</td>\n<td style=\"text-align:left\">设置容器使用内存最大值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–net bridge</td>\n<td style=\"text-align:left\">指定容器的网络连接类型, 支持 bridge / host / none / container 四种类型</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–ip 172.18.0.13</td>\n<td style=\"text-align:left\">为容器分配固定 ip ( 需要使用自定义网络 )</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–expose 8081 –expose 8082</td>\n<td style=\"text-align:left\">开放一个端口或一组端口, 会覆盖镜像设置中开放的端口</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-p [宿主机端口]:[容器内端口]</td>\n<td style=\"text-align:left\">宿主机到容器的端口映射, 可指定宿主机的要监听的 ip, 默认为 0.0.0.0</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-P</td>\n<td style=\"text-align:left\">注意是大写的, 宿主机随机指定一组可用的端口映射容器 expose 的所有端口</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-v [宿主机目录路径]:[容器内目录路径]</td>\n<td style=\"text-align:left\">挂载宿主机的指定目录 ( 或文件 ) 到容器内的指定目录 ( 或文件 )</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–add-host [主机名]:[ip]</td>\n<td style=\"text-align:left\">为容器 hosts 文件追加 host , 默认会在 hosts 文件最后追加内容：[主机名]:[容器ip]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–volumes-from [其他容器名]</td>\n<td style=\"text-align:left\">将其他容器的数据卷添加到此容器</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–link [其他容器名]:[在该容器中的别名]</td>\n<td style=\"text-align:left\">添加链接到另一个容器, 在本容器 hosts 文件中加入关联容器的记录, 效果类似于 –add-host</td>\n</tr>\n</tbody>\n</table>\n<p>剩个坑以后想起来再填(</p>\n","site":{"data":{}},"excerpt":"","more":"<p>2013年发布至今， <a href=\"https://www.docker.com/\" target=\"_blank\" rel=\"noopener\">Docker</a>一直广受瞩目，被认为可能会改变软件行业。今天就简单说说Docker.</p>\n<h1 id=\"一-Docker的优点\"><a href=\"#一-Docker的优点\" class=\"headerlink\" title=\"一.Docker的优点\"></a>一.Docker的优点</h1><h2 id=\"持续部署与测试\"><a href=\"#持续部署与测试\" class=\"headerlink\" title=\"持续部署与测试\"></a>持续部署与测试</h2><p>Docker在开发与运维的世界中具有极大的吸引力，因为它能保持跨环境的一致性。在开发与发布的生命周期中，不同的环境具有细微的不同，这些差异可能是由于不同安装包的版本和依赖关系引起的。然而，Docker可以通过确保从开发到产品发布整个过程环境的一致性来解决这个问题*Docker容器通过相关配置，保持容器内部所有的配置和依赖关系始终不变。最终，你可以在开发到产品发布的整个过程中使用相同的容器来确保没有任何差异或者人工干预。</p>\n<p>使用Docker，你还可以确保开发者不需要配置完全相同的产品环境，他们可以在他们自己的系统上通过VirtualBox建立虚拟机来运行Docker容器。Docker的魅力在于它同样可以让你在亚马逊EC2实例上运行相同的容器。如果你需要在一个产品发布周期中完成一次升级，你可以很容易地将需要变更的东西放到Docker容器中，测试它们，并且使你已经存在的容器执行相同的变更。这种灵活性就是使用Docker的一个主要好处。和标准部署与集成过程一样，Docker可以让你构建、测试和发布镜像，这个镜像可以跨多个服务器进行部署。哪怕安装一个新的安全补丁，整个过程也是一样的。你可以安装补丁，然后测试它，并且将这个补丁发布到产品中。</p>\n<h2 id=\"多云平台\"><a href=\"#多云平台\" class=\"headerlink\" title=\"多云平台\"></a>多云平台</h2><p>Docker最大的好处之一就是可移植性。在过去的几年里，所有主流的云计算提供商，包括亚马逊AWS和谷歌的GCP，都将Docker融入到他们的平台并增加了各自的支持。Docker容器能运行在亚马逊的EC2实例、谷歌的GCP实例、Rackspace服务器或者VirtualBox这些提供主机操作系统的平台上。举例来说，如果运行在亚马逊EC2实例上的Docker容器能够很容易地移植到其他几个平台上，比如说VirtualBox，并且达到类似的一致性和功能性，那这将允许你从基础设施层中抽象出来。除了AWS和GCP，Docker在其他不同的IaaS提供商也运行的非常好，例如微软的Azure、OpenStack和可以被具有不同配置的管理者所使用的Chef、Puppet、Ansible等。</p>\n<h2 id=\"环境标准化和版本控制\"><a href=\"#环境标准化和版本控制\" class=\"headerlink\" title=\"环境标准化和版本控制\"></a>环境标准化和版本控制</h2><p>通过上面的讨论，Docker容器可以在不同的开发与产品发布生命周期中确保一致性，进而标准化你的环境。除此之外，Docker容器还可以像git仓库一样，可以让你提交变更到Docker镜像中并通过不同的版本来管理它们。设想如果你因为完成了一个组件的升级而导致你整个环境都损坏了，Docker可以让你轻松地回滚到这个镜像的前一个版本。这整个过程可以在几分钟内完成，如果和虚拟机的备份或者镜像创建流程对比，那Docker算相当快的，它可以让你快速地进行复制和实现冗余。此外，启动Docker就和运行一个进程一样快。</p>\n<h2 id=\"隔离性\"><a href=\"#隔离性\" class=\"headerlink\" title=\"隔离性\"></a>隔离性</h2><p>Docker可以确保你的应用程序与资源是分隔开的。几个月前，Gartner发表了一篇报告，这份报告说明了运行Docker 容器进行资源隔离的效果和虚拟机（VM）管理程序一样的好，但是管理与控制方面还需要进行完善。</p>\n<p>我们考虑这样一个场景，你在你的虚拟机中运行了很多应用程序，这些应用程序包括团队协作软件（例如Confluence）、问题追踪软件（例如JIRA）、集中身份管理系统（例如Crowd）等等。由于这些软件运行在不同的端口上，所以你必须使用Apache或者Nginx来做反向代理。到目前为止，一切都很正常，但是随着你的环境向前推进，你需要在你现有的环境中配置一个内容管理系统（例如Alfresco）。这时候有个问题发生了，这个软件需要一个不同版本的Apache Tomcat，为了满足这个需求，你只能将你现有的软件迁移到另一个版本的Tomcat上，或者找到适合你现有Tomcat的内容管理系统（Alfresco）版本。</p>\n<p>对于上述场景，使用Docker就不用做这些事情了。Docker能够确保每个容器都拥有自己的资源，并且和其他容器是隔离的。你可以用不同的容器来运行使用不同堆栈的应用程序。除此之外，如果你想在服务器上直接删除一些应用程序是比较困难的，因为这样可能引发依赖关系冲突。而Docker可以帮你确保应用程序被完全清除，因为不同的应用程序运行在不同的容器上，如果你不在需要一款应用程序，那你可以简单地通过删除容器来删除这个应用程序，并且在你的宿主机操作系统上不会留下任何的临时文件或者配置文件。</p>\n<p>除了上述好处，Docker还能确保每个应用程序只使用分配给它的资源（包括CPU、内存和磁盘空间）。一个特殊的软件将不会使用你全部的可用资源，要不然这将导致性能降低，甚至让其他应用程序完全停止工作。</p>\n<h2 id=\"安全性\"><a href=\"#安全性\" class=\"headerlink\" title=\"安全性\"></a>安全性</h2><p>如上所述，Gartner也承认Docker正在快速地发展。从安全角度来看，Docker确保运行在容器中的应用程序和其他容器中的应用程序是完全分隔与隔离的，在通信流量和管理上赋予你完全的控制权。Docker容器不能窥视运行在其他容器中的进程。从体系结构角度来看，每个容器只使用着自己的资源（从进程到网络堆栈）。</p>\n<p>作为紧固安全的一种手段，Docker将宿主机操作系统上的敏感挂载点（例如/proc和/sys）作为只读挂载点，并且使用一种写时复制系统来确保容器不能读取其他容器的数据。Docker也限制了宿主机操作系统上的一些系统调用，并且和SELinux与AppArmor一起运行的很好。此外，在Docker Hub上可以使用的Docker镜像都通过数字签名来确保其可靠性。由于Docker容器是隔离的，并且资源是受限制的，所以即使你其中一个应用程序被黑，也不会影响运行在其它Docker容器上的应用程序。</p>\n<h2 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h2><p>软件开发的第一件事就是配置开发环境,用户计算机的环境都不相同，你如何使自己开发的软件，能在别的机器跑起来？用户必须保证两件事：操作系统的设置，各种库和组件的安装。只有它们都正确，软件才能运行。Docker可以把软件和开发环境一并打包.</p>\n<h1 id=\"二-虚拟机\"><a href=\"#二-虚拟机\" class=\"headerlink\" title=\"二.虚拟机\"></a>二.虚拟机</h1><p>虚拟机（virtual machine）就是带环境安装的一种解决方案。它可以在一种操作系统里面运行另一种操作系统，比如在 Windows 系统里面运行 Linux 系统。应用程序对此毫无感知，因为虚拟机看上去跟真实系统一模一样，而对于底层系统来说，虚拟机就是一个普通文件，不需要了就删掉，对其他部分毫无影响。</p>\n<p>虽然用户可以通过虚拟机还原软件的原始环境。但是，这个方案有几个缺点。</p>\n<ol>\n<li>资源占用多</li>\n</ol>\n<p>虚拟机会独占一部分内存和硬盘空间。它运行的时候，其他程序就不能使用这些资源了。哪怕虚拟机里面的应用程序，真正使用的内存只有 1MB，虚拟机依然需要几百 MB 的内存才能运行。</p>\n<ol start=\"2\">\n<li>冗余步骤多</li>\n</ol>\n<p>虚拟机是完整的操作系统，一些系统级别的操作步骤，往往无法跳过，比如用户登录。</p>\n<ol start=\"3\">\n<li><p>启动慢</p>\n<p> 启动操作系统需要多久，启动虚拟机就需要多久。可能要等几分钟，应<br>用程序才能真正运行。</p>\n</li>\n</ol>\n<h1 id=\"三-Linux-容器\"><a href=\"#三-Linux-容器\" class=\"headerlink\" title=\"三.Linux 容器\"></a>三.Linux 容器</h1><p>由于虚拟机存在这些缺点，Linux 发展出了另一种虚拟化技术：Linux 容器（Linux Containers，缩写为 LXC）。</p>\n<p>Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。或者说，在正常进程的外面套了一个保护层。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离。</p>\n<p>由于容器是进程级别的，相比虚拟机有很多优势。</p>\n<ol>\n<li>启动快</li>\n</ol>\n<p>容器里面的应用，直接就是底层系统的一个进程，而不是虚拟机内部的进程。所以，启动容器相当于启动本机的一个进程，而不是启动一个操作系统，速度就快很多。</p>\n<ol start=\"2\">\n<li>资源占用少</li>\n</ol>\n<p>容器只占用需要的资源，不占用那些没有用到的资源；虚拟机由于是完整的操作系统，不可避免要占用所有资源。另外，多个容器可以共享资源，虚拟机都是独享资源。</p>\n<ol start=\"3\">\n<li>体积小</li>\n</ol>\n<p>容器只要包含用到的组件即可，而虚拟机是整个操作系统的打包，所以容器文件比虚拟机文件要小很多。</p>\n<p>总之，容器有点像轻量级的虚拟机，能够提供虚拟化的环境，但是成本开销小得多。</p>\n<h1 id=\"四-Docker是什么\"><a href=\"#四-Docker是什么\" class=\"headerlink\" title=\"四. Docker是什么?\"></a>四. Docker是什么?</h1><blockquote>\n<p>Docker is an open-source project that automates the deployment of applications inside software containers, by providing an additional layer of abstraction and automation of operating-system-level virtualization on Linux. Docker uses the resource isolation features of the Linux kernel such as cgroups and kernel namespaces, and a union-capable filesystem such as aufs and others to allow independent “containers” to run within a single Linux instance, avoiding the overhead of starting and maintaining virtual machines.Docker是一个开放源代码软件项目，让应用程序布署在软件容器下的工作可以自动化进行，借此在Linux操作系统上，提供一个额外的软件抽象层，以及操作系统层虚拟化的自动管理机制。Docker利用Linux核心中的资源分离机制，例如cgroups，以及Linux核心命名空间（name space），来建立独立的软件容器（containers）。这可以在单一Linux实体下运作，避免启动一个虚拟机器造成的额外负担。——摘自维基百科</p>\n</blockquote>\n<h1 id=\"五-安装Docker\"><a href=\"#五-安装Docker\" class=\"headerlink\" title=\"五. 安装Docker\"></a>五. 安装Docker</h1><p>Docker包括两个版本,docker ce(Community Edition)社区版和<br>docker ee(Enterprise Edition)企业版.本篇所有内容只针对社区版.</p>\n<p>Docker的安装方式请参考<a href=\"https://docs.docker.com/install/overview/\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<p>安装完成执行<code>docker</code>命令会报 <code>permission denied</code> 没权限的错误</p>\n<p>一些Windowsers会说用<code>root</code>用户啊……另一些有基本常识,知道不应该使用<code>root</code>的人可能会说,<br>那用<code>sudo docker</code>吧,这两种方法都是不对的,或者说不合适.</p>\n<p>说使用<code>root</code>的人，应该回去好好学习一下 <code>Linux</code> 权限常识。一般 不应该直接使用 <code>root</code> 用户，直接使用 <code>root</code> 用户不仅仅是严重的违反了安全规范，而且也极容易造成操作事故。这不是 <code>Windows</code> 世界，<code>Linux/Unix</code> 世界是有严格的权限要求的，只应该使用最小的权限做事情。如果还不熟悉 <code>Linux</code> 权限机制，那就去学习一下，不要把 <code>Windows</code>的坏毛病带过来。</p>\n<p>说使用 <code>sudo docker</code> 的人，思路是对的，因为理解了平时操作应该使用普通用户，只有在需要的时候，才 <code>sudo</code> 提升权限进行操作。但是问题就在这个需要二字上，事实上，不需要 <code>root</code> 权限就可以执行 <code>docker</code> 命令。</p>\n<p>其实如果看过官方安装文档的话都会知道，只需要将操作 <code>docker</code> 的用户，加入 <code>docker</code> 组，那么该用户既拥有了操作 <code>docker</code> 的权限。<br>因此,只需要执行:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo usermod -aG docker $USER</span><br></pre></td></tr></table></figure>\n<p>把当前用户加入到<code>docker</code>组, 退出重新登录系统后,执行<code>docker info</code> 看一下,会发现可以不用<code>sudo docker</code>来执行<code>docker</code>命令了</p>\n<p>如果需要添加别的用户，将其中的 <code>$USER</code>换成对应的用户名即可。</p>\n<p>将用户添加到 <code>docker</code> 组，可以避免 root 权限误操作的问题，但是由于 dockerd 引擎是运行在 root 用户下的，而 docker 组成员有权限指挥 dockerd 引擎来做很多事情，因此，该用户实际上是拥有了 root 的权限的。因此不要误解了将当前用户加入 docker 组的初衷，这和赋予用户 sudo 权力是一样的，可不是说这个用户就没有 root 权限了。这样做，只<br>是不再需要使用 sudo 了，也降低了使用 sudo 时误操作的可能。</p>\n<p>Docker是C-S架构,需要在本地先启动docker服务.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># service 命令的用法</span><br><span class=\"line\">$ sudo service docker start</span><br><span class=\"line\"></span><br><span class=\"line\"># systemctl 命令的用法</span><br><span class=\"line\">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"六-image文件\"><a href=\"#六-image文件\" class=\"headerlink\" title=\"六.image文件\"></a>六.image文件</h1><p>Docker 把应用程序及其依赖，打包在 image 文件里面。只有通过这个文件，才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。</p>\n<p>image 是二进制文件。实际开发中，一个 image 文件往往通过继承另一个 image 文件，加上一些个性化设置而生成。</p>\n<p>对Docker images的操作<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 列出本机的所有 image 文件</span><br><span class=\"line\">docker images</span><br><span class=\"line\"># 删除 image 文件</span><br><span class=\"line\">docker rmi xxx</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"七-Hello-World\"><a href=\"#七-Hello-World\" class=\"headerlink\" title=\"七.Hello World!\"></a>七.Hello World!</h1><p>docker 官方制作了Hello World的镜像.使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run hello-world</span><br></pre></td></tr></table></figure></p>\n<p>docker会先检查本地有没有<code>hello-world</code>镜像,没有的话会从官方仓库中拉取.</p>\n<h2 id=\"docker-pull-慢怎么解决\"><a href=\"#docker-pull-慢怎么解决\" class=\"headerlink\" title=\"docker pull 慢怎么解决\"></a>docker pull 慢怎么解决</h2><p>首先，要“感谢”伟大的墙。</p>\n<p>然后，我们可以使用 Docker 镜像加速器来解决这个问题，加速器就是镜像、代理的概念。国内有不少机构提供了免费的加速器以方便大家使用，这里列出一些常用的加速器服务：</p>\n<ul>\n<li>Docker 官方的中国镜像加速器：从2017年6月9日起，Docker 官方提供了在中国的加速器，以解决墙的问题。不用注册，直接使用加速器地址：<a href=\"https://registry.docker-cn.com\" target=\"_blank\" rel=\"noopener\">https://registry.docker-cn.com</a> 即可。</li>\n<li>中国科技大学的镜像加速器：中科大的加速器不用注册，直接使用地址 <a href=\"https://docker.mirrors.ustc.edu.cn/\" target=\"_blank\" rel=\"noopener\">https://docker.mirrors.ustc.edu.cn/</a> 配置加速器即可。进一步的信息可以访问：<a href=\"http://mirrors.ustc.edu.cn/help/dockerhub.html?highlight=docker\" target=\"_blank\" rel=\"noopener\">http://mirrors.ustc.edu.cn/help/dockerhub.html?highlight=docker</a></li>\n<li>阿里云加速器：注册阿里云开发账户(免费的)后，访问这个链接就可以看到加速器地址： <a href=\"https://cr.console.aliyun.com/#/accelerator\" target=\"_blank\" rel=\"noopener\">https://cr.console.aliyun.com/#/accelerator</a></li>\n<li>DaoCloud 加速器：注册 DaoCloud 账户(支持微信登录)，然后访问： <a href=\"https://www.daocloud.io/mirror#accelerator-doc\" target=\"_blank\" rel=\"noopener\">https://www.daocloud.io/mirror#accelerator-doc</a></li>\n</ul>\n<h2 id=\"访问官方文档很慢怎么办\"><a href=\"#访问官方文档很慢怎么办\" class=\"headerlink\" title=\"访问官方文档很慢怎么办\"></a>访问官方文档很慢怎么办</h2><p>再次感谢伟大的 <strong>墙</strong><br>我们可以本地运行 Docker 官方文档的网站，以 docker 的方式：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -d -p 80:4000 docs/docker.github.io</span><br></pre></td></tr></table></figure></p>\n<p>这样访问 Docker 宿主的 <code>80</code> 端口，如 <a href=\"http://localhost，就会看到官网文档了。\" target=\"_blank\" rel=\"noopener\">http://localhost，就会看到官网文档了。</a></p>\n<h1 id=\"八-Docker常用命令\"><a href=\"#八-Docker常用命令\" class=\"headerlink\" title=\"八. Docker常用命令\"></a>八. Docker常用命令</h1><h2 id=\"基础类\"><a href=\"#基础类\" class=\"headerlink\" title=\"基础类\"></a>基础类</h2><ol>\n<li><p>查看Docker信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看docker版本</span><br><span class=\"line\">docker version</span><br><span class=\"line\"># 显示docker系统的信息</span><br><span class=\"line\">docker info</span><br><span class=\"line\"># 日志信息</span><br><span class=\"line\">docker logs</span><br><span class=\"line\"># 故障检查</span><br><span class=\"line\">docker status</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>本地镜像</p>\n</li>\n</ol>\n<p>查看本地镜像</p>\n<blockquote>\n<p>docker images<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(base)  alroy@Alan  ~  docker images</span><br><span class=\"line\">REPOSITORY                   TAG                 IMAGE ID            CREATED             SIZE</span><br><span class=\"line\">nginx                        latest              27a188018e18        2 weeks ago         109MB</span><br><span class=\"line\">ubuntu                       latest              94e814e2efa8        7 weeks ago         88.9MB</span><br><span class=\"line\">hello-world                  latest              fce289e99eb9        4 months ago        1.84kB</span><br><span class=\"line\">zsnmwy/bilihelper            latest              b108cce8590c        6 months ago        96.3MB</span><br><span class=\"line\">zsnmwy/bilibili-live-tools   latest              e2b0e619d00a        9 months ago        112MB</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>删除本地镜像</p>\n<blockquote>\n<p>docker rmi hello-world<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(base)  alroy@Alan  ~  docker rmi hello-world</span><br><span class=\"line\">Error response from daemon: conflict: unable to remove repository reference &quot;hello-world&quot; (must force) - container 93b3b3af6661 is using its referenced image fce289e99eb9</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>正在运行的容器使用的镜像无法删除,想删除需先停止容器再删除镜像</p>\n<ol start=\"3\">\n<li><p>查看镜像详情</p>\n<blockquote>\n<p>docker inspect [ 镜像名 or 镜像 id ] </p>\n</blockquote>\n</li>\n<li><p>打包本地镜像, 使用压缩包来完成迁移</p>\n</li>\n</ol>\n<blockquote>\n<p>docker save [ 镜像名 ] &gt; [ 文件路径 ]</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 默认为文件流输出</span><br><span class=\"line\">docker save ubuntu &gt; /home/alroy/ubuntu.img</span><br><span class=\"line\"></span><br><span class=\"line\"># 或者使用 &apos;-o&apos; 选项指定输出文件路径</span><br><span class=\"line\">docker save -o ubuntu &gt; /home/alroy/ubuntu.img</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li><p>导入镜像压缩包</p>\n<blockquote>\n<p>docker load &lt; [ 文件路径 ]</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(base)  ✘ alroy@Alan  ~  docker load -i  /home/alroy/ubuntu.img </span><br><span class=\"line\">Loaded image: ubuntu:latest</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>修改镜像tag</p>\n<blockquote>\n<p>docker tag [ 镜像名 or 镜像 id ] [ 新镜像名 ]:[ 新 tag ]</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker tag hello-world:latest hello-world:test</span><br></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>日志</li>\n</ol>\n<blockquote>\n<p>docker logs -f &lt;容器名orID&gt;</p>\n</blockquote>\n<p>journalctl 日志工具使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 最后行数的日志</span><br><span class=\"line\">journalctl -n</span><br><span class=\"line\"># 详细信息</span><br><span class=\"line\">journalctl -f</span><br><span class=\"line\"># 本次启动后的所有日志</span><br><span class=\"line\">journalctl -b</span><br><span class=\"line\"># 查看启动记录</span><br><span class=\"line\">journalctl --list-boots</span><br><span class=\"line\"># 查看某次运行过程中的日志</span><br><span class=\"line\">sudo journalctl -b [启动顺序号，或者启动hash]</span><br><span class=\"line\"># 查看记录中指定单元 docker.service 的日志</span><br><span class=\"line\">journalctl -u docker.service</span><br></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>查看容器信息</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看当前运行的容器</span><br><span class=\"line\">docker ps</span><br><span class=\"line\"># 查看全部容器</span><br><span class=\"line\">docker ps -a</span><br><span class=\"line\"># 查看全部容器的id和信息</span><br><span class=\"line\">docker ps -a -q</span><br><span class=\"line\"># 查看全部容器占用的空间</span><br><span class=\"line\">docker ps -as</span><br><span class=\"line\"># 查看一个正在运行容器进程，支持 ps 命令参数</span><br><span class=\"line\">docker top</span><br><span class=\"line\"># 查看容器的示例id</span><br><span class=\"line\">sudo docker inspect -f  &apos;&#123;&#123;.Id&#125;&#125;&apos; [id]</span><br><span class=\"line\"># 检查镜像或者容器的参数，默认返回 JSON 格式</span><br><span class=\"line\">docker inspect</span><br></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li><p>启动停止容器等操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start|stop|restart [id]</span><br><span class=\"line\"># 暂停|恢复 某一容器的所有进程</span><br><span class=\"line\">docker pause|unpause [id]</span><br><span class=\"line\"># 杀死一个或多个指定容器进程</span><br><span class=\"line\">docker kill -s KILL [id]</span><br><span class=\"line\"># 停止全部运行的容器</span><br><span class=\"line\">docker stop `docker ps -q`</span><br><span class=\"line\"># 杀掉全部运行的容器</span><br><span class=\"line\">docker kill -s KILL `docker ps -q`</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>交互式进入容器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it &#123;&#123;containerName or containerID&#125;&#125; bash</span><br><span class=\"line\">docker exec -i &#123;&#123;containerName or containerID&#125;&#125; bash</span><br><span class=\"line\">docker exec -t &#123;&#123;containerName or containerID&#125;&#125; bash</span><br><span class=\"line\">docker exec -d &#123;&#123;containerName or containerID&#125;&#125; bash</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>run命令常用选项</p>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">选项</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">-d</td>\n<td style=\"text-align:left\">后台运行容器, 并返回容器ID；不指定时, 启动后开始打印日志, Ctrl + C 退出命令同时会关闭容器</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-i</td>\n<td style=\"text-align:left\">以交互模式运行容器, 通常与 -t 同时使用；</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-t</td>\n<td style=\"text-align:left\">为容器重新分配一个伪输入终端, 通常与 -i 同时使用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–name “anyesu-container”</td>\n<td style=\"text-align:left\">为容器指定一个别名, 不指定时随机生成</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-h docker-anyesu</td>\n<td style=\"text-align:left\">设置容器的主机名, 默认随机生成</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–dns 8.8.8.8</td>\n<td style=\"text-align:left\">指定容器使用的 DNS 服务器, 默认和宿主机一致</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-e docker_host=172.17.0.1</td>\n<td style=\"text-align:left\">设置环境变量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–cpuset=”0-2” or –cpuset=”0,1,2”</td>\n<td style=\"text-align:left\">绑定容器到指定 CPU 运行</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-m 100M</td>\n<td style=\"text-align:left\">设置容器使用内存最大值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–net bridge</td>\n<td style=\"text-align:left\">指定容器的网络连接类型, 支持 bridge / host / none / container 四种类型</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–ip 172.18.0.13</td>\n<td style=\"text-align:left\">为容器分配固定 ip ( 需要使用自定义网络 )</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–expose 8081 –expose 8082</td>\n<td style=\"text-align:left\">开放一个端口或一组端口, 会覆盖镜像设置中开放的端口</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-p [宿主机端口]:[容器内端口]</td>\n<td style=\"text-align:left\">宿主机到容器的端口映射, 可指定宿主机的要监听的 ip, 默认为 0.0.0.0</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-P</td>\n<td style=\"text-align:left\">注意是大写的, 宿主机随机指定一组可用的端口映射容器 expose 的所有端口</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-v [宿主机目录路径]:[容器内目录路径]</td>\n<td style=\"text-align:left\">挂载宿主机的指定目录 ( 或文件 ) 到容器内的指定目录 ( 或文件 )</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–add-host [主机名]:[ip]</td>\n<td style=\"text-align:left\">为容器 hosts 文件追加 host , 默认会在 hosts 文件最后追加内容：[主机名]:[容器ip]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–volumes-from [其他容器名]</td>\n<td style=\"text-align:left\">将其他容器的数据卷添加到此容器</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–link [其他容器名]:[在该容器中的别名]</td>\n<td style=\"text-align:left\">添加链接到另一个容器, 在本容器 hosts 文件中加入关联容器的记录, 效果类似于 –add-host</td>\n</tr>\n</tbody>\n</table>\n<p>剩个坑以后想起来再填(</p>\n"}],"PostAsset":[{"_id":"source/_posts/Hexo博客中插入图片/psj.jpeg","slug":"psj.jpeg","post":"ckm4ekynv0004esw4p2et9ykj","modified":1,"renderable":0},{"_id":"source/_posts/Python3-Django2-xadmin项目踩坑记录/django1-2.png","slug":"django1-2.png","post":"ckm4ekyoe0008esw4olrulf3t","modified":1,"renderable":0},{"_id":"source/_posts/Python实现BFS-DFS/BFS.png","post":"ckm4ekyoh0009esw4kfnw8n1i","slug":"BFS.png","modified":1,"renderable":1},{"_id":"source/_posts/Python3-Django2-xadmin项目踩坑记录/django1-1.png","post":"ckm4ekyoe0008esw4olrulf3t","slug":"django1-1.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"ckm4ekyno0002esw45v7grwwz","category_id":"ckm4ekyo80006esw40iwfomr4","_id":"ckm4ekyp0000gesw4fh2iaw2v"},{"post_id":"ckm4ekynv0004esw4p2et9ykj","category_id":"ckm4ekyo80006esw40iwfomr4","_id":"ckm4ekyp5000jesw43szqs6ap"},{"post_id":"ckm4ekyoe0008esw4olrulf3t","category_id":"ckm4ekyp0000fesw4vpywwfrd","_id":"ckm4ekyp8000pesw4diwevv5s"},{"post_id":"ckm4ekyox000desw4plkhec2t","category_id":"ckm4ekyp8000oesw4jttvajfh","_id":"ckm4ekypb000uesw4cc8p6x8u"},{"post_id":"ckm4ekyoz000eesw4m0kc1rq8","category_id":"ckm4ekyp9000resw4hjm42sib","_id":"ckm4ekypd000yesw49npx461c"},{"post_id":"ckm4ekyoh0009esw4kfnw8n1i","category_id":"ckm4ekyp0000fesw4vpywwfrd","_id":"ckm4ekype0010esw4irlugkae"},{"post_id":"ckm4ekyoh0009esw4kfnw8n1i","category_id":"ckm4ekypb000wesw4ni563ypi","_id":"ckm4ekypf0012esw4gtmclc6w"}],"PostTag":[{"post_id":"ckm4ekyno0002esw45v7grwwz","tag_id":"ckm4ekyod0007esw4zdhsfk6e","_id":"ckm4ekyp3000iesw4x7mk8qgx"},{"post_id":"ckm4ekyno0002esw45v7grwwz","tag_id":"ckm4ekyot000cesw4hbfa8gep","_id":"ckm4ekyp5000kesw44lbzrvll"},{"post_id":"ckm4ekynv0004esw4p2et9ykj","tag_id":"ckm4ekyod0007esw4zdhsfk6e","_id":"ckm4ekyp7000nesw4y507gaap"},{"post_id":"ckm4ekyoe0008esw4olrulf3t","tag_id":"ckm4ekyp6000mesw4rivoai1k","_id":"ckm4ekypa000tesw4o8q9e2h4"},{"post_id":"ckm4ekyoe0008esw4olrulf3t","tag_id":"ckm4ekyp8000qesw4h54q0l99","_id":"ckm4ekypb000vesw4mfwra9i8"},{"post_id":"ckm4ekyoh0009esw4kfnw8n1i","tag_id":"ckm4ekyp6000mesw4rivoai1k","_id":"ckm4ekypf0013esw4vmow7rsd"},{"post_id":"ckm4ekyoh0009esw4kfnw8n1i","tag_id":"ckm4ekypc000xesw4aeu5ls82","_id":"ckm4ekypg0014esw43t30mc7m"},{"post_id":"ckm4ekyoh0009esw4kfnw8n1i","tag_id":"ckm4ekypd000zesw4ghrdsot8","_id":"ckm4ekypg0016esw4meu9u7u8"},{"post_id":"ckm4ekyox000desw4plkhec2t","tag_id":"ckm4ekype0011esw4uf6coq4w","_id":"ckm4ekyph0018esw47v9n2pgy"},{"post_id":"ckm4ekyox000desw4plkhec2t","tag_id":"ckm4ekypg0015esw4az3rlese","_id":"ckm4ekypi0019esw4z2r1fxw0"},{"post_id":"ckm4ekyoz000eesw4m0kc1rq8","tag_id":"ckm4ekyph0017esw4vpdap1lg","_id":"ckm4ekypk001besw4gqmivrgf"},{"post_id":"ckm4ekyoz000eesw4m0kc1rq8","tag_id":"ckm4ekypj001aesw4kq6qs4h1","_id":"ckm4ekypl001cesw48sm82drq"}],"Tag":[{"name":"Hexo","_id":"ckm4ekyod0007esw4zdhsfk6e"},{"name":"Github","_id":"ckm4ekyot000cesw4hbfa8gep"},{"name":"Python","_id":"ckm4ekyp6000mesw4rivoai1k"},{"name":"Django","_id":"ckm4ekyp8000qesw4h54q0l99"},{"name":"BFS","_id":"ckm4ekypc000xesw4aeu5ls82"},{"name":"DFS","_id":"ckm4ekypd000zesw4ghrdsot8"},{"name":"海子","_id":"ckm4ekype0011esw4uf6coq4w"},{"name":"诗","_id":"ckm4ekypg0015esw4az3rlese"},{"name":"Docker","_id":"ckm4ekyph0017esw4vpdap1lg"},{"name":"虚拟化","_id":"ckm4ekypj001aesw4kq6qs4h1"}]}}